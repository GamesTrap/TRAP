function GenerateCatchUserConfigHPP()
    local targetFile = "Catch2/src/catch2/catch_user_config.hpp"

    --Does target file already exist
    if os.isfile(targetFile) then
        return
    end

    local ok, err = os.touchfile(targetFile)

    if not ok then
        term.setTextColor(term.errorColor)
        print("Unable to create " .. targetFile .. ": " .. err)
        term.setTextColor(nil)
        os.exit(-1)
    end

    local content = [[
//              Copyright Catch2 Authors
// Distributed under the Boost Software License, Version 1.0.
//   (See accompanying file LICENSE.txt or copy at
//        https://www.boost.org/LICENSE_1_0.txt)

// SPDX-License-Identifier: BSL-1.0
/**\file
 * **AUTOGENERATED FROM PREMAKE CONFIGURATION**
 *
 * Contains materialized compile-time configuration provided to Catch2's
 * Premake configuration. All compile-time configuration options need to
 * be here, and also documented in `docs/configuration.md`.
 */
#if defined(linux) || defined(__linux) || defined(__linux__)
    #define CATCH_PLATFORM_LINUX
#elif defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER) || defined(__MINGW32__)
    #define CATCH_PLATFORM_WINDOWS
#endif

#if __cplusplus >= 201402L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201402L)
    #define CATCH_CPP14_OR_GREATER
#endif /*__cplusplus >= 201402L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201402L)*/

#if __cplusplus >= 201703L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)
    #define CATCH_CPP17_OR_GREATER
#endif /*__cplusplus >= 201703L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)*/

#if defined(CATCH_PLATFORM_WINDOWS) || defined(__CYGWIN__)
    #define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
#else
    #define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS
#endif

#define CATCH_INTERNAL_CONFIG_GETENV

#ifdef __ANDROID__
    #define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING
#endif /*__ANDROID__*/

#ifdef __MINGW32__
    #define CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH
#endif /*__MINGW32__*/

#ifdef __CYGWIN__
    #define _BSD_SOURCE
    #if !((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99) && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))
        #define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING
    #endif /*!((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99) && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))*/
#endif /*__CYGWIN__*/

#ifdef _MSC_VER
    #define CATCH_INTERNAL_CONFIG_WINDOWS_SEH

    #ifndef __clang__
        #if !defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)
            #define CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
        #endif /*!defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)*/
    #endif /*__clang__*/
#endif /*_MSC_VER*/

#if defined(_REENTRANT) || defined(_MSC_VER)
    #define CATCH_INTERNAL_CONFIG_USE_ASYNC
#endif /*defined(_REENTRANT) || defined(_MSC_VER)*/

#if defined(__EXCEPTIONS) || defined(__cpp_exceptions) || defined(_CPPUNWIND)
    #define CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED
#endif /*defined(__EXCEPTIONS) || defined(__cpp_exceptions) || defined(_CPPUNWIND)*/

#ifndef _GLIBCXX_USE_C99_MATH_TR1
    #define CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER
#endif /*_GLIBCXX_USE_C99_MATH_TR1*/

#ifdef __has_include
    #if __has_include(<string_view>) && defined(CATCH_CPP17_OR_GREATER)
        #define CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW
    #endif /*__has_include(<string_view>) && defined(CATCH_CPP17_OR_GREATER)*/

    #if __has_include(<optional>) && defined(CATCH_CPP17_OR_GREATER)
        #define CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL
    #endif /*__has_include(<optional>) && defined(CATCH_CPP17_OR_GREATER)*/

    #if __has_include(<cstddef>) && defined(CATCH_CPP17_OR_GREATER)
        #include <cstddef>
        #if defined(__cpp_lib_byte) && (__cpp_lib_byte > 0)
            #define CATCH_INTERNAL_CONFIG_CPP17_BYTE
        #endif /*defined(__cpp_lib_byte) && (__cpp_lib_byte > 0)*/
    #endif /*__has_include(<cstddef>) && defined(CATCH_CPP17_OR_GREATER)*/

    #if __has_include(<variant>) && defined(CATCH_CPP17_OR_GREATER)
        #if defined(__clang__) && (__clang_major__ < 8)
            #include <ciso646>
            #if defined(__GLIBCXX__) && defined(_GLIBCXX_RELEASE) && (_GLIBCXX_RELEASE < 9)
                #define CATCH_CONFIG_NO_CPP17_VARIANT
            #else
                #define CATCH_INTERNAL_CONFIG_CPP17_VARIANT
            #endif /*defined(__GLIBCXX__) && defined(_GLIBCXX_RELEASE) && (_GLIBCXX_RELEASE < 9)*/
        #else
            #define CATCH_INTERNAL_CONFIG_CPP17_VARIANT
        #endif /*defined(__clang__) && (__clang_major__ < 8)*/
    #endif /*__has_include(<variant>) && defined(CATCH_CPP17_OR_GREATER)*/
#endif /*__has_include*/

#if defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH) && !defined(CATCH_CONFIG_NO_WINDOWS_SEH) && !defined(CATCH_CONFIG_WINDOWS_SEH) && !defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)
    #define CATCH_CONFIG_WINDOWS_SEH
#endif /*defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH) && !defined(CATCH_CONFIG_NO_WINDOWS_SEH) && !defined(CATCH_CONFIG_WINDOWS_SEH) && !defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)*/

#if defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS) && !defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_POSIX_SIGNALS)
    #define CATCH_CONFIG_POSIX_SIGNALS
#endif /*defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS) && !defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_POSIX_SIGNALS)*/

#if defined(CATCH_INTERNAL_CONFIG_GETENV) && !defined(CATCH_INTERNAL_CONFIG_NO_GETENV) && !defined(CATCH_CONFIG_NO_GETENV) && !defined(CATCH_CONFIG_GETENV)
    #define CATCH_CONFIG_GETENV
#endif /*defined(CATCH_INTERNAL_CONFIG_GETENV) && !defined(CATCH_INTERNAL_CONFIG_NO_GETENV) && !defined(CATCH_CONFIG_NO_GETENV) && !defined(CATCH_CONFIG_GETENV)*/

#if !defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_CPP11_TO_STRING)
    #define CATCH_CONFIG_CPP11_TO_STRING
#endif /*!defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_NO_CPP11_TO_STRING) && !defined(CATCH_CONFIG_CPP11_TO_STRING)*/

#if defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_NO_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_CPP17_OPTIONAL)
    #define CATCH_CONFIG_CPP17_OPTIONAL
#endif /*defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_NO_CPP17_OPTIONAL) && !defined(CATCH_CONFIG_CPP17_OPTIONAL)*/

#if defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_CPP17_STRING_VIEW)
    #define CATCH_CONFIG_CPP17_STRING_VIEW
#endif /*defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_CPP17_STRING_VIEW)*/

#if defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT) && !defined(CATCH_CONFIG_NO_CPP17_VARIANT) && !defined(CATCH_CONFIG_CPP17_VARIANT)
    #define CATCH_CONFIG_CPP17_VARIANT
#endif /*defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT) && !defined(CATCH_CONFIG_NO_CPP17_VARIANT) && !defined(CATCH_CONFIG_CPP17_VARIANT)*/

#if defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE) && !defined(CATCH_CONFIG_NO_CPP17_BYTE) && !defined(CATCH_CONFIG_CPP17_BYTE)
    #define CATCH_CONFIG_CPP17_BYTE
#endif /*defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE) && !defined(CATCH_CONFIG_NO_CPP17_BYTE) && !defined(CATCH_CONFIG_CPP17_BYTE)*/

#if defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)
    #define CATCH_INTERNAL_CONFIG_NEW_CAPTURE
#endif /*defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)*/

#if defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE) && !defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NEW_CAPTURE)
    #define CATCH_CONFIG_NEW_CAPTURE
#endif /*defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE) && !defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NO_NEW_CAPTURE) && !defined(CATCH_CONFIG_NEW_CAPTURE)*/

#if !defined( CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED ) && !defined( CATCH_CONFIG_DISABLE_EXCEPTIONS ) && !defined( CATCH_CONFIG_NO_DISABLE_EXCEPTIONS )
    #define CATCH_CONFIG_DISABLE_EXCEPTIONS
#endif /*!defined( CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED ) && !defined( CATCH_CONFIG_DISABLE_EXCEPTIONS ) && !defined( CATCH_CONFIG_NO_DISABLE_EXCEPTIONS )*/

#if defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_NO_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_POLYFILL_ISNAN)
    #define CATCH_CONFIG_POLYFILL_ISNAN
#endif /*defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_NO_POLYFILL_ISNAN) && !defined(CATCH_CONFIG_POLYFILL_ISNAN)*/

#if defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)  && !defined(CATCH_INTERNAL_CONFIG_NO_ASYNC) && !defined(CATCH_CONFIG_NO_USE_ASYNC) && !defined(CATCH_CONFIG_USE_ASYNC)
    #define CATCH_CONFIG_USE_ASYNC
#endif /*defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)  && !defined(CATCH_INTERNAL_CONFIG_NO_ASYNC) && !defined(CATCH_CONFIG_NO_USE_ASYNC) && !defined(CATCH_CONFIG_USE_ASYNC)*/

#if defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)
    #define CATCH_CONFIG_GLOBAL_NEXTAFTER
#endif /*defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER) && !defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)*/

#if !defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)
    #define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION
#endif /*!defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)*/

#if !defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)
    #define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION
#endif /*!defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)
    #define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)
    #define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT)
    #define CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS)
    #define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS)
    #define CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS)*/

#if !defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)
    #define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS
#endif /*!defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)*/

#if !defined( CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS )
    #define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
#endif /*!defined( CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS )*/

#if !defined( CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS )
    #define CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS
#endif /*!defined( CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS )*/

#if !defined( CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS )
    #define CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS
#endif /*!defined( CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS )*/

#if !defined(CATCH_INTERNAL_IGNORE_BUT_WARN)
    #define CATCH_INTERNAL_IGNORE_BUT_WARN(...)
#endif /*!defined(CATCH_INTERNAL_IGNORE_BUT_WARN)*/

#if defined(__clang__) && (__clang_major__ < 5)
    #undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS
#endif /*defined(__clang__) && (__clang_major__ < 5)*/

#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)
    #define CATCH_TRY if ((true))
    #define CATCH_CATCH_ALL if ((false))
    #define CATCH_CATCH_ANON(type) if ((false))
#else
    #define CATCH_TRY try
    #define CATCH_CATCH_ALL catch (...)
    #define CATCH_CATCH_ANON(type) catch (type)
#endif

#if defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)
    #define CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR
#endif /*defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR) && !defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)*/

#if defined( CATCH_PLATFORM_WINDOWS ) && !defined( CATCH_CONFIG_COLOUR_WIN32 ) && !defined( CATCH_CONFIG_NO_COLOUR_WIN32 ) && !defined( CATCH_INTERNAL_CONFIG_NO_COLOUR_WIN32 )
    #define CATCH_CONFIG_COLOUR_WIN32
#endif /*defined( CATCH_PLATFORM_WINDOWS ) && !defined( CATCH_CONFIG_COLOUR_WIN32 ) && !defined( CATCH_CONFIG_NO_COLOUR_WIN32 ) && !defined( CATCH_INTERNAL_CONFIG_NO_COLOUR_WIN32 )*/

#if defined( CATCH_CONFIG_SHARED_LIBRARY ) && defined( _MSC_VER ) && !defined( CATCH_CONFIG_STATIC )
    #ifdef Catch2_EXPORTS
        #define CATCH_EXPORT //__declspec( dllexport ) // not needed
    #else
        #define CATCH_EXPORT __declspec( dllimport )
    #endif
#else
    #define CATCH_EXPORT
#endif
]]

    io.writefile(targetFile, content)
end

project "Catch2"
    kind "StaticLib"
    language "C++"
    warnings "off"

    targetdir ("%{wks.location}/bin/" .. outputdir .. "/%{prj.group}/%{prj.name}")
    objdir ("%{wks.location}/bin-int/" .. outputdir .. "/%{prj.group}/%{prj.name}")

    GenerateCatchUserConfigHPP()

    files
    {
        "Catch2/src/**.h",
        "Catch2/src/**.hpp",
        "Catch2/src/**.c",
        "Catch2/src/**.cpp"
    }

    includedirs
    {
        "Catch2/src"
    }
