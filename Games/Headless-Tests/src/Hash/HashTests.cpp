#include "HashTests.h"

namespace
{
    void TestAdler32()
    {
        static constexpr std::array<u8, 4u> emptyHash = {0x00u, 0x00u, 0x00u, 0x01u};
        assert(TRAP::Utils::Hash::Adler32("") == emptyHash);

        static constexpr std::array<u8, 4u> test1Hash = {0x36u, 0xC4u, 0x05u, 0xFEu};
        assert(TRAP::Utils::Hash::Adler32("Eagles are great!") == test1Hash);

        static constexpr std::array<u8, 4u> test2Hash = {0x04u, 0x0Fu, 0x0Fu, 0xC1u};
        assert(TRAP::Utils::Hash::Adler32("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~") == test2Hash);
    }

    //-------------------------------------------------------------------------------------------------------------------//

    void TestCRC32()
    {
        static constexpr std::array<u8, 4u> emptyHash = {0x00u, 0x00u, 0x00u, 0x00u};
        assert(TRAP::Utils::Hash::CRC32("") == emptyHash);

        static constexpr std::array<u8, 4u> foxHash = {0x41u, 0x4Fu, 0xA3u, 0x39u};
        assert(TRAP::Utils::Hash::CRC32("The quick brown fox jumps over the lazy dog") == foxHash);

        static constexpr std::array<u8, 4u> testData1Hash{0x9Bu, 0xD3u, 0x66u, 0xAEu};
        static constexpr std::array<u8, 33u> testData1 =
        {
            0x76u, 0x61u, 0x72u, 0x69u, 0x6Fu, 0x75u, 0x73u, 0x20u, 0x43u, 0x52u, 0x43u, 0x20u, 0x61u, 0x6Cu, 0x67u, 0x6Fu, 0x72u, 0x69u,
            0x74u, 0x68u, 0x6Du, 0x73u, 0x20u, 0x69u, 0x6Eu, 0x70u, 0x75u, 0x74u, 0x20u, 0x64u, 0x61u, 0x74u, 0x61u
        };
        assert(TRAP::Utils::Hash::CRC32(testData1.data(), testData1.size()) == testData1Hash);
    }

    //-------------------------------------------------------------------------------------------------------------------//

    void TestSHA2_256()
    {
        static constexpr std::array<u8, 32u> abcHash{0xBAu, 0x78u, 0x16u, 0xBFu, 0x8Fu, 0x01u, 0xCFu, 0xEAu, 0x41u, 0x41u, 0x40u,
                                                     0xDEu, 0x5Du, 0xAEu, 0x22u, 0x23u, 0xB0u, 0x03u, 0x61u, 0xA3u, 0x96u, 0x17u,
                                                     0x7Au, 0x9Cu, 0xB4u, 0x10u, 0xFFu, 0x61u, 0xF2u, 0x00u, 0x15u, 0xADu};
        assert(TRAP::Utils::Hash::SHA2_256("abc") == abcHash);
        static constexpr std::array<u8, 32u> emptyHash{0xE3u, 0xB0u, 0xC4u, 0x42u, 0x98u, 0xFCu, 0x1Cu, 0x14u, 0x9Au, 0xFBu, 0xF4u,
                                                       0xC8u, 0x99u, 0x6Fu, 0xB9u, 0x24u, 0x27u, 0xAEu, 0x41u, 0xE4u, 0x64u, 0x9Bu,
                                                       0x93u, 0x4Cu, 0xA4u, 0x95u, 0x99u, 0x1Bu, 0x78u, 0x52u, 0xB8u, 0x55u};
        assert(TRAP::Utils::Hash::SHA2_256("") == emptyHash);
        static constexpr std::array<u8, 32u> longHash{0x24u, 0x8Du, 0x6Au, 0x61u, 0xD2u, 0x06u, 0x38u, 0xB8u, 0xE5u, 0xC0u, 0x26u,
                                                      0x93u, 0x0Cu, 0x3Eu, 0x60u, 0x39u, 0xA3u, 0x3Cu, 0xE4u, 0x59u, 0x64u, 0xFFu,
                                                      0x21u, 0x67u, 0xF6u, 0xECu, 0xEDu, 0xD4u, 0x19u, 0xDBu, 0x06u, 0xC1u};
        assert(TRAP::Utils::Hash::SHA2_256("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") == longHash);
        static constexpr std::array<u8, 32u> longerHash{0xCFu, 0x5Bu, 0x16u, 0xA7u, 0x78u, 0xAFu, 0x83u, 0x80u, 0x03u, 0x6Cu, 0xE5u,
                                                        0x9Eu, 0x7Bu, 0x04u, 0x92u, 0x37u, 0x0Bu, 0x24u, 0x9Bu, 0x11u, 0xE8u, 0xF0u,
                                                        0x7Au, 0x51u, 0xAFu, 0xACu, 0x45u, 0x03u, 0x7Au, 0xFEu, 0xE9u, 0xD1u};
        assert(TRAP::Utils::Hash::SHA2_256("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu") == longerHash);

        static constexpr std::array<u8, 32u> aHash{0xCDu, 0xC7u, 0x6Eu, 0x5Cu, 0x99u, 0x14u, 0xFBu, 0x92u, 0x81u, 0xA1u, 0xC7u,
                                                   0xE2u, 0x84u, 0xD7u, 0x3Eu, 0x67u, 0xF1u, 0x80u, 0x9Au, 0x48u, 0xA4u, 0x97u,
                                                   0x20u, 0x0Eu, 0x04u, 0x6Du, 0x39u, 0xCCu, 0xC7u, 0x11u, 0x2Cu, 0xD0u};
        const std::string aTest(1'000'000u, 'a');
        assert(TRAP::Utils::Hash::SHA2_256(aTest) == aHash);

        static constexpr std::array<u8, 32u> extremeHash{0x50u, 0xE7u, 0x2Au, 0x0Eu, 0x26u, 0x44u, 0x2Fu, 0xE2u, 0x55u, 0x2Du, 0xC3u,
                                                         0x93u, 0x8Au, 0xC5u, 0x86u, 0x58u, 0x22u, 0x8Cu, 0x0Cu, 0xBFu, 0xB1u, 0xD2u,
                                                         0xCAu, 0x87u, 0x2Au, 0xE4u, 0x35u, 0x26u, 0x6Fu, 0xCDu, 0x05u, 0x5Eu};
        std::string extremeTest;
        extremeTest.reserve(16'777'216ull * 64u);
        for(u64 i = 0u; i < 16'777'216u; ++i)
            extremeTest += "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";
        assert(TRAP::Utils::Hash::SHA2_256(extremeTest) == extremeHash);
    }

    //-------------------------------------------------------------------------------------------------------------------//

    void TestSHA2_512()
    {
        static constexpr std::array<u8, 64u> abcHash{0xDDu, 0xAFu, 0x35u, 0xA1u, 0x93u, 0x61u, 0x7Au, 0xBAu, 0xCCu, 0x41u, 0x73u,
                                                     0x49u, 0xAEu, 0x20u, 0x41u, 0x31u, 0x12u, 0xE6u, 0xFAu, 0x4Eu, 0x89u, 0xA9u,
                                                     0x7Eu, 0xA2u, 0x0Au, 0x9Eu, 0xEEu, 0xE6u, 0x4Bu, 0x55u, 0xD3u, 0x9Au, 0x21u,
                                                     0x92u, 0x99u, 0x2Au, 0x27u, 0x4Fu, 0xC1u, 0xA8u, 0x36u, 0xBAu, 0x3Cu, 0x23u,
                                                     0xA3u, 0xFEu, 0xEBu, 0xBDu, 0x45u, 0x4Du, 0x44u, 0x23u, 0x64u, 0x3Cu, 0xE8u,
                                                     0x0Eu, 0x2Au, 0x9Au, 0xC9u, 0x4Fu, 0xA5u, 0x4Cu, 0xA4u, 0x9Fu};
        assert(TRAP::Utils::Hash::SHA2_512("abc") == abcHash);
        static constexpr std::array<u8, 64u> emptyHash{0xCFu, 0x83u, 0xE1u, 0x35u, 0x7Eu, 0xEFu, 0xB8u, 0xBDu, 0xF1u, 0x54u, 0x28u,
                                                       0x50u, 0xD6u, 0x6Du, 0x80u, 0x07u, 0xD6u, 0x20u, 0xE4u, 0x05u, 0x0Bu, 0x57u,
                                                       0x15u, 0xDCu, 0x83u, 0xF4u, 0xA9u, 0x21u, 0xD3u, 0x6Cu, 0xE9u, 0xCEu, 0x47u,
                                                       0xD0u, 0xD1u, 0x3Cu, 0x5Du, 0x85u, 0xF2u, 0xB0u, 0xFFu, 0x83u, 0x18u, 0xD2u,
                                                       0x87u, 0x7Eu, 0xECu, 0x2Fu, 0x63u, 0xB9u, 0x31u, 0xBDu, 0x47u, 0x41u, 0x7Au,
                                                       0x81u, 0xA5u, 0x38u, 0x32u, 0x7Au, 0xF9u, 0x27u, 0xDAu, 0x3Eu};
        assert(TRAP::Utils::Hash::SHA2_512("") == emptyHash);
        static constexpr std::array<u8, 64u> longHash{0x20u, 0x4Au, 0x8Fu, 0xC6u, 0xDDu, 0xA8u, 0x2Fu, 0x0Au, 0x0Cu, 0xEDu, 0x7Bu,
                                                      0xEBu, 0x8Eu, 0x08u, 0xA4u, 0x16u, 0x57u, 0xC1u, 0x6Eu, 0xF4u, 0x68u, 0xB2u,
                                                      0x28u, 0xA8u, 0x27u, 0x9Bu, 0xE3u, 0x31u, 0xA7u, 0x03u, 0xC3u, 0x35u, 0x96u,
                                                      0xFDu, 0x15u, 0xC1u, 0x3Bu, 0x1Bu, 0x07u, 0xF9u, 0xAAu, 0x1Du, 0x3Bu, 0xEAu,
                                                      0x57u, 0x78u, 0x9Cu, 0xA0u, 0x31u, 0xADu, 0x85u, 0xC7u, 0xA7u, 0x1Du, 0xD7u,
                                                      0x03u, 0x54u, 0xECu, 0x63u, 0x12u, 0x38u, 0xCAu, 0x34u, 0x45u};
        assert(TRAP::Utils::Hash::SHA2_512("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") == longHash);
        static constexpr std::array<u8, 64u> longerHash{0x8Eu, 0x95u, 0x9Bu, 0x75u, 0xDAu, 0xE3u, 0x13u, 0xDAu, 0x8Cu, 0xF4u, 0xF7u,
                                                        0x28u, 0x14u, 0xFCu, 0x14u, 0x3Fu, 0x8Fu, 0x77u, 0x79u, 0xC6u, 0xEBu, 0x9Fu,
                                                        0x7Fu, 0xA1u, 0x72u, 0x99u, 0xAEu, 0xADu, 0xB6u, 0x88u, 0x90u, 0x18u, 0x50u,
                                                        0x1Du, 0x28u, 0x9Eu, 0x49u, 0x00u, 0xF7u, 0xE4u, 0x33u, 0x1Bu, 0x99u, 0xDEu,
                                                        0xC4u, 0xB5u, 0x43u, 0x3Au, 0xC7u, 0xD3u, 0x29u, 0xEEu, 0xB6u, 0xDDu, 0x26u,
                                                        0x54u, 0x5Eu, 0x96u, 0xE5u, 0x5Bu, 0x87u, 0x4Bu, 0xE9u, 0x09u};
        assert(TRAP::Utils::Hash::SHA2_512("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu") == longerHash);

        static constexpr std::array<u8, 64u> aHash{0xE7u, 0x18u, 0x48u, 0x3Du, 0x0Cu, 0xE7u, 0x69u, 0x64u, 0x4Eu, 0x2Eu, 0x42u,
                                                   0xC7u, 0xBCu, 0x15u, 0xB4u, 0x63u, 0x8Eu, 0x1Fu, 0x98u, 0xB1u, 0x3Bu, 0x20u,
                                                   0x44u, 0x28u, 0x56u, 0x32u, 0xA8u, 0x03u, 0xAFu, 0xA9u, 0x73u, 0xEBu, 0xDEu,
                                                   0x0Fu, 0xF2u, 0x44u, 0x87u, 0x7Eu, 0xA6u, 0x0Au, 0x4Cu, 0xB0u, 0x43u, 0x2Cu,
                                                   0xE5u, 0x77u, 0xC3u, 0x1Bu, 0xEBu, 0x00u, 0x9Cu, 0x5Cu, 0x2Cu, 0x49u, 0xAAu,
                                                   0x2Eu, 0x4Eu, 0xADu, 0xB2u, 0x17u, 0xADu, 0x8Cu, 0xC0u, 0x9Bu};
        const std::string aTest(1'000'000u, 'a');
        assert(TRAP::Utils::Hash::SHA2_512(aTest) == aHash);

        static constexpr std::array<u8, 64u> extremeHash{0xB4u, 0x7Cu, 0x93u, 0x34u, 0x21u, 0xEAu, 0x2Du, 0xB1u, 0x49u, 0xADu, 0x6Eu,
                                                         0x10u, 0xFCu, 0xE6u, 0xC7u, 0xF9u, 0x3Du, 0x07u, 0x52u, 0x38u, 0x01u, 0x80u,
                                                         0xFFu, 0xD7u, 0xF4u, 0x62u, 0x9Au, 0x71u, 0x21u, 0x34u, 0x83u, 0x1Du, 0x77u,
                                                         0xBEu, 0x60u, 0x91u, 0xB8u, 0x19u, 0xEDu, 0x35u, 0x2Cu, 0x29u, 0x67u, 0xA2u,
                                                         0xE2u, 0xD4u, 0xFAu, 0x50u, 0x50u, 0x72u, 0x3Cu, 0x96u, 0x30u, 0x69u, 0x1Fu,
                                                         0x1Au, 0x05u, 0xA7u, 0x28u, 0x1Du, 0xBEu, 0x6Cu, 0x10u, 0x86u};
        std::string extremeTest;
        extremeTest.reserve(16'777'216ull * 64u);
        for(u64 i = 0u; i < 16'777'216u; ++i)
            extremeTest += "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";
        assert(TRAP::Utils::Hash::SHA2_512(extremeTest) == extremeHash);
    }

    //-------------------------------------------------------------------------------------------------------------------//

    void TestSHA3_256()
    {
        static constexpr std::array<u8, 32u> abcHash{0x3Au, 0x98u, 0x5Du, 0xA7u, 0x4Fu, 0xE2u, 0x25u, 0xB2u, 0x04u, 0x5Cu, 0x17u,
                                                     0x2Du, 0x6Bu, 0xD3u, 0x90u, 0xBDu, 0x85u, 0x5Fu, 0x08u, 0x6Eu, 0x3Eu, 0x9Du,
                                                     0x52u, 0x5Bu, 0x46u, 0xBFu, 0xE2u, 0x45u, 0x11u, 0x43u, 0x15u, 0x32u};
        assert(TRAP::Utils::Hash::SHA3_256("abc") == abcHash);
        static constexpr std::array<u8, 32u> emptyHash{0xA7u, 0xFFu, 0xC6u, 0xF8u, 0xBFu, 0x1Eu, 0xD7u, 0x66u, 0x51u, 0xC1u, 0x47u,
                                                       0x56u, 0xA0u, 0x61u, 0xD6u, 0x62u, 0xF5u, 0x80u, 0xFFu, 0x4Du, 0xE4u, 0x3Bu,
                                                       0x49u, 0xFAu, 0x82u, 0xD8u, 0x0Au, 0x4Bu, 0x80u, 0xF8u, 0x43u, 0x4Au};
        assert(TRAP::Utils::Hash::SHA3_256("") == emptyHash);
        static constexpr std::array<u8, 32u> longHash{0x41u, 0xC0u, 0xDBu, 0xA2u, 0xA9u, 0xD6u, 0x24u, 0x08u, 0x49u, 0x10u, 0x03u,
                                                      0x76u, 0xA8u, 0x23u, 0x5Eu, 0x2Cu, 0x82u, 0xE1u, 0xB9u, 0x99u, 0x8Au, 0x99u,
                                                      0x9Eu, 0x21u, 0xDBu, 0x32u, 0xDDu, 0x97u, 0x49u, 0x6Du, 0x33u, 0x76u};
        assert(TRAP::Utils::Hash::SHA3_256("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") == longHash);
        static constexpr std::array<u8, 32u> longerHash{0x91u, 0x6Fu, 0x60u, 0x61u, 0xFEu, 0x87u, 0x97u, 0x41u, 0xCAu, 0x64u, 0x69u,
                                                        0xB4u, 0x39u, 0x71u, 0xDFu, 0xDBu, 0x28u, 0xB1u, 0xA3u, 0x2Du, 0xC3u, 0x6Cu,
                                                        0xB3u, 0x25u, 0x4Eu, 0x81u, 0x2Bu, 0xE2u, 0x7Au, 0xADu, 0x1Du, 0x18u};
        assert(TRAP::Utils::Hash::SHA3_256("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu") == longerHash);

        static constexpr std::array<u8, 32u> aHash{0x5Cu, 0x88u, 0x75u, 0xAEu, 0x47u, 0x4Au, 0x36u, 0x34u, 0xBAu, 0x4Fu, 0xD5u,
                                                   0x5Eu, 0xC8u, 0x5Bu, 0xFFu, 0xD6u, 0x61u, 0xF3u, 0x2Au, 0xCAu, 0x75u, 0xC6u,
                                                   0xD6u, 0x99u, 0xD0u, 0xCDu, 0xCBu, 0x6Cu, 0x11u, 0x58u, 0x91u, 0xC1u};
        const std::string aTest(1'000'000u, 'a');
        assert(TRAP::Utils::Hash::SHA3_256(aTest) == aHash);

        static constexpr std::array<u8, 32u> extremeHash{0xECu, 0xBBu, 0xC4u, 0x2Cu, 0xBFu, 0x29u, 0x66u, 0x03u, 0xACu, 0xB2u, 0xC6u,
                                                         0xBCu, 0x04u, 0x10u, 0xEFu, 0x43u, 0x78u, 0xBAu, 0xFBu, 0x24u, 0xB7u, 0x10u,
                                                         0x35u, 0x7Fu, 0x12u, 0xDFu, 0x60u, 0x77u, 0x58u, 0xB3u, 0x3Eu, 0x2Bu};
        std::string extremeTest;
        extremeTest.reserve(16'777'216ull * 64u);
        for(u64 i = 0u; i < 16'777'216u; ++i)
            extremeTest += "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";
        assert(TRAP::Utils::Hash::SHA3_256(extremeTest) == extremeHash);
    }

    //-------------------------------------------------------------------------------------------------------------------//

    void TestSHA3_512()
    {
        static constexpr std::array<u8, 64u> abcHash{0xB7u, 0x51u, 0x85u, 0x0Bu, 0x1Au, 0x57u, 0x16u, 0x8Au, 0x56u, 0x93u, 0xCDu,
                                                     0x92u, 0x4Bu, 0x6Bu, 0x09u, 0x6Eu, 0x08u, 0xF6u, 0x21u, 0x82u, 0x74u, 0x44u,
                                                     0xF7u, 0x0Du, 0x88u, 0x4Fu, 0x5Du, 0x02u, 0x40u, 0xD2u, 0x71u, 0x2Eu, 0x10u,
                                                     0xE1u, 0x16u, 0xE9u, 0x19u, 0x2Au, 0xF3u, 0xC9u, 0x1Au, 0x7Eu, 0xC5u, 0x76u,
                                                     0x47u, 0xE3u, 0x93u, 0x40u, 0x57u, 0x34u, 0x0Bu, 0x4Cu, 0xF4u, 0x08u, 0xD5u,
                                                     0xA5u, 0x65u, 0x92u, 0xF8u, 0x27u, 0x4Eu, 0xECu, 0x53u, 0xF0u};
        assert(TRAP::Utils::Hash::SHA3_512("abc") == abcHash);
        static constexpr std::array<u8, 64u> emptyHash{0xA6u, 0x9Fu, 0x73u, 0xCCu, 0xA2u, 0x3Au, 0x9Au, 0xC5u, 0xC8u, 0xB5u, 0x67u,
                                                       0xDCu, 0x18u, 0x5Au, 0x75u, 0x6Eu, 0x97u, 0xC9u, 0x82u, 0x16u, 0x4Fu, 0xE2u,
                                                       0x58u, 0x59u, 0xE0u, 0xD1u, 0xDCu, 0xC1u, 0x47u, 0x5Cu, 0x80u, 0xA6u, 0x15u,
                                                       0xB2u, 0x12u, 0x3Au, 0xF1u, 0xF5u, 0xF9u, 0x4Cu, 0x11u, 0xE3u, 0xE9u, 0x40u,
                                                       0x2Cu, 0x3Au, 0xC5u, 0x58u, 0xF5u, 0x00u, 0x19u, 0x9Du, 0x95u, 0xB6u, 0xD3u,
                                                       0xE3u, 0x01u, 0x75u, 0x85u, 0x86u, 0x28u, 0x1Du, 0xCDu, 0x26u};
        assert(TRAP::Utils::Hash::SHA3_512("") == emptyHash);
        static constexpr std::array<u8, 64u> longHash{0x04u, 0xA3u, 0x71u, 0xE8u, 0x4Eu, 0xCFu, 0xB5u, 0xB8u, 0xB7u, 0x7Cu, 0xB4u,
                                                      0x86u, 0x10u, 0xFCu, 0xA8u, 0x18u, 0x2Du, 0xD4u, 0x57u, 0xCEu, 0x6Fu, 0x32u,
                                                      0x6Au, 0x0Fu, 0xD3u, 0xD7u, 0xECu, 0x2Fu, 0x1Eu, 0x91u, 0x63u, 0x6Du, 0xEEu,
                                                      0x69u, 0x1Fu, 0xBEu, 0x0Cu, 0x98u, 0x53u, 0x02u, 0xBAu, 0x1Bu, 0x0Du, 0x8Du,
                                                      0xC7u, 0x8Cu, 0x08u, 0x63u, 0x46u, 0xB5u, 0x33u, 0xB4u, 0x9Cu, 0x03u, 0x0Du,
                                                      0x99u, 0xA2u, 0x7Du, 0xAFu, 0x11u, 0x39u, 0xD6u, 0xE7u, 0x5Eu};
        assert(TRAP::Utils::Hash::SHA3_512("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") == longHash);
        static constexpr std::array<u8, 64u> longerHash{0xAFu, 0xEBu, 0xB2u, 0xEFu, 0x54u, 0x2Eu, 0x65u, 0x79u, 0xC5u, 0x0Cu, 0xADu,
                                                        0x06u, 0xD2u, 0xE5u, 0x78u, 0xF9u, 0xF8u, 0xDDu, 0x68u, 0x81u, 0xD7u, 0xDCu,
                                                        0x82u, 0x4Du, 0x26u, 0x36u, 0x0Fu, 0xEEu, 0xBFu, 0x18u, 0xA4u, 0xFAu, 0x73u,
                                                        0xE3u, 0x26u, 0x11u, 0x22u, 0x94u, 0x8Eu, 0xFCu, 0xFDu, 0x49u, 0x2Eu, 0x74u,
                                                        0xE8u, 0x2Eu, 0x21u, 0x89u, 0xEDu, 0x0Fu, 0xB4u, 0x40u, 0xD1u, 0x87u, 0xF3u,
                                                        0x82u, 0x27u, 0x0Cu, 0xB4u, 0x55u, 0xF2u, 0x1Du, 0xD1u, 0x85u};
        assert(TRAP::Utils::Hash::SHA3_512("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu") == longerHash);

        static constexpr std::array<u8, 64u> aHash{0x3Cu, 0x3Au, 0x87u, 0x6Du, 0xA1u, 0x40u, 0x34u, 0xABu, 0x60u, 0x62u, 0x7Cu, 0x07u,
                                                   0x7Bu, 0xB9u, 0x8Fu, 0x7Eu, 0x12u, 0x0Au, 0x2Au, 0x53u, 0x70u, 0x21u, 0x2Du, 0xFFu,
                                                   0xB3u, 0x38u, 0x5Au, 0x18u, 0xD4u, 0xF3u, 0x88u, 0x59u, 0xEDu, 0x31u, 0x1Du, 0x0Au,
                                                   0x9Du, 0x51u, 0x41u, 0xCEu, 0x9Cu, 0xC5u, 0xC6u, 0x6Eu, 0xE6u, 0x89u, 0xB2u, 0x66u,
                                                   0xA8u, 0xAAu, 0x18u, 0xACu, 0xE8u, 0x28u, 0x2Au, 0x0Eu, 0x0Du, 0xB5u, 0x96u, 0xC9u,
                                                   0x0Bu, 0x0Au, 0x7Bu, 0x87u};
        const std::string aTest(1'000'000u, 'a');
        assert(TRAP::Utils::Hash::SHA3_512(aTest) == aHash);

        static constexpr std::array<u8, 64u> extremeHash{0x23u, 0x5Fu, 0xFDu, 0x53u, 0x50u, 0x4Eu, 0xF8u, 0x36u, 0xA1u, 0x34u, 0x2Bu,
                                                         0x48u, 0x8Fu, 0x48u, 0x3Bu, 0x39u, 0x6Eu, 0xABu, 0xBFu, 0xE6u, 0x42u, 0xCFu,
                                                         0x78u, 0xEEu, 0x0Du, 0x31u, 0xFEu, 0xECu, 0x78u, 0x8Bu, 0x23u, 0xD0u, 0xD1u,
                                                         0x8Du, 0x5Cu, 0x33u, 0x95u, 0x50u, 0xDDu, 0x59u, 0x58u, 0xA5u, 0x00u, 0xD4u,
                                                         0xB9u, 0x53u, 0x63u, 0xDAu, 0x1Bu, 0x5Fu, 0xA1u, 0x8Au, 0xFFu, 0xC1u, 0xBAu,
                                                         0xB2u, 0x29u, 0x2Du, 0xC6u, 0x3Bu, 0x7Du, 0x85u, 0x09u, 0x7Cu};
        std::string extremeTest;
        extremeTest.reserve(16'777'216ull * 64u);
        for(u64 i = 0u; i < 16'777'216u; ++i)
            extremeTest += "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";
        assert(TRAP::Utils::Hash::SHA3_512(extremeTest) == extremeHash);
    }
}

//-------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------//

void HashTests::OnAttach()
{
    {
        const std::jthread adler32Thread(TestAdler32);
        const std::jthread crc32Thread(TestCRC32);
        const std::jthread sha2_256Thread(TestSHA2_256);
        const std::jthread sha2_512Thread(TestSHA2_512);
        const std::jthread sha3_256Thread(TestSHA3_256);
        const std::jthread sha3_512Thread(TestSHA3_512);
    }

	TRAP::Application::Shutdown();
}
