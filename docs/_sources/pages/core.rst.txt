.. _core:

====
Core
====

-------
General
-------

.. note::
   This File sets the target operating system to build for!

-----------------
TRAP_MAKE_VERSION
-----------------

.. code-block:: cpp

    constexpr uint32_t TRAP_MAKE_VERSION(const uint32_t major,
                                         const uint32_t minor,
                                         const uint32_t patch);

| **Description**
| Constructs a packed version number

| **Parameters**

- :code:`major` Specifies the major version number
- :code:`minor` Specifies the minor version number
- :code:`patch` Specifies the patch version number

------------------
TRAP_VERSION_MAJOR
------------------

.. code-block:: cpp

    constexpr uint32_t TRAP_VERSION_MAJOR(const uint32_t version);

| **Description**
| Extracts and returns the major version number from a packed version number

| **Parameters**

- :code:`version` Specifies the packed version number

------------------
TRAP_VERSION_MINOR
------------------

.. code-block:: cpp

    constexpr uint32_t TRAP_VERSION_MINOR(const uint32_t version);

| **Description**
| Extracts and returns the minor version number from a packed version number

| **Parameters**

- :code:`version` Specifies the packed version number

------------------
TRAP_VERSION_PATCH
------------------

.. code-block:: cpp

    constexpr uint32_t TRAP_VERSION_PATCH(const uint32_t version);

| **Description**
| Extracts and returns the patch version number from a packed version number

| **Parameters**

- :code:`version` Specifies the packed version number

------------
TRAP_VERSION
------------

.. code-block:: cpp

    constexpr uint32_t TRAP_VERSION;

| **Description**
| Contains the current packed version number of :ref:`trap_engine`

----------------
TRAP_DEBUG_BREAK
----------------

.. code-block:: cpp

    void TRAP_DEBUG_BREAK();

| **Description**
| Invokes a break

.. warning::
   If :ref:`trap_engine` gets build in Release mode this function will do nothing!

-------------------
TRAP_ENABLE_ASSERTS
-------------------

.. code-block:: cpp

    TRAP_ENABLE_ASSERTS

| **Description**
| This macro specifies if asserts should be used or not

.. warning::
   :code:`TRAP_ENABLE_ASSERTS` only gets defined if :ref:`trap_engine` gets build in Debug or "Release with Debug info" mode!

-----------
TRAP_ASSERT
-----------

.. code-block:: cpp

    TRAP_ASSERT(x, ...)

| **Description**
| If :code:`x` is false this will trigger a :ref:`TP_ERROR` with the message :code:`"Assertion Failed:` + contents from :code:`...`  + :code:`" @[__FILE__:__LINE__]"` and then breaks the engine with `TRAP_DEBUG_BREAK`_

| **Parameters**

- :code:`x` Specifies the value to check
- :code:`...` Specifies the message to print if the assertion gets triggered

.. warning::
   This macro won't do anything if :code:`TRAP_ENABLE_ASSERTS` is not defined!

----------------
TRAP_CORE_ASSERT
----------------

.. code-block:: cpp

    TRAP_CORE_ASSERT(x, ...)

| **Description**
| If :code:`x` is false this will trigger a :ref:`TP_ERROR` with the message :code:`"[Core] Assertion Failed:` + contents from :code:`...`  + :code:`" @[__FILE__:__LINE__]"` and then breaks the engine with `TRAP_DEBUG_BREAK`_

| **Parameters**

- :code:`x` Specifies the value to check
- :code:`...` Specifies the message to print if the assertion gets triggered

.. warning::
   This macro won't do anything if :code:`TRAP_ENABLE_ASSERTS` is not defined!

--------------------
TRAP_RENDERER_ASSERT
--------------------

.. code-block:: cpp

    TRAP_RENDERER_ASSERT(x, ...)

| **Description**
| If :code:`x` is false this will trigger a :ref:`TP_ERROR` with the message :code:`"[Renderer] Assertion Failed:` + contents from :code:`...`  + :code:`" @[__FILE__:__LINE__]"` and then breaks the engine with `TRAP_DEBUG_BREAK`_

| **Parameters**

- :code:`x` Specifies the value to check
- :code:`...` Specifies the message to print if the assertion gets triggered

.. warning::
   This macro won't do anything if :code:`TRAP_ENABLE_ASSERTS` is not defined!

.. _core_bit:

---
BIT
---

.. code-block:: cpp

    template<typename T>
    constexpr T BIT(T x);

| **Description**
| This function returns the value of 1 shifted by :code:`x`

| **Parameters**

- :code:`x` Specifies the amount to shift

-----
Scope
-----

.. code-block:: cpp

    template<typename T>
    using Scope = std::unique_ptr<T>;

| **Description**
| :code:`Scope` is used as a scoped pointer

| **Parameters**

- :code:`T` Specifies the object that the scoped pointer should use

.. note::
   This may change in the future when memory management gets added

---------
MakeScope
---------

.. code-block:: cpp

    template<typename T, typename... Args>
    constexpr Scope<T> MakeScope(Args&&... args);

| **Description**
| :code:`MakeScope` is used to create a scoped pointer

| **Parameters**

- :code:`T` Specifies the object that the scoped pointer should use
- :code:`Args` Specifies the parameters needed by the object :code:`T` to initialize/construct

.. note::
   This may change in the future when memory management gets added

.. _ref:

---
Ref
---

.. code-block:: cpp

    template<typename T>
    using Ref = std::unique_ptr<T>;

| **Description**
| :code:`Ref` is used as a reference pointer

| **Parameters**

- :code:`T` Specifies the object that the reference pointer should use

.. note::
   This may change in the future when memory management gets added

---------
MakeScope
---------

.. code-block:: cpp

    template<typename T, typename... Args>
    constexpr Ref<T> MakeRef(Args&&... args);

| **Description**
| :code:`MakeRef` is used to create a reference pointer

| **Parameters**

- :code:`T` Specifies the object that the reference pointer should use
- :code:`Args` Specifies the parameters needed by the object :code:`T` to initialize/construct

.. note::
   This may change in the future when memory management gets added
