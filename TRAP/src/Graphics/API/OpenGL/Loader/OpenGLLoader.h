/*
The MIT License (MIT)

Copyright (c) 2013-2018 David Herberth

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Modified by: Jan "GamesTrap" Schuerkamp
*/

#ifndef _TRAP_OPENGLLOADER_H_
#define _TRAP_OPENGLLOADER_H_

//OpenGL 4.6 Core No Extensions

#ifdef __gl_h_
	#error OpenGL header already included, remove this include, OpenGLLoader already provides it
#endif
#define __gl_h_

#if defined(TRAP_PLATFORM_WINDOWS) || defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP___)
	#define APIENTRY __stdcall
#endif

#ifndef APIENTRY
	#define APIENTRY
#endif
#ifndef APIENTRYP
	#define APIENTRYP APIENTRY *
#endif

#ifndef GLAPIENTRY
	#define GLAPIENTRY APIENTRY
#endif

struct TRAPOpenGLVersionStruct
{
	int32_t Major = 0;
	int32_t Minor = 0;
};

typedef void* (*TRAPLoadProc)(const char* name);

#ifndef GLAPI
	#define GLAPI extern
#endif

GLAPI struct TRAPOpenGLVersionStruct OpenGLVersion;
GLAPI bool TRAPLoadOpenGL();
GLAPI bool TRAPLoadOpenGLLoader(TRAPLoadProc);

typedef uint32_t GLenum;
typedef uint8_t GLboolean;
typedef uint32_t GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int32_t GLint;
typedef uint32_t GLuint;
typedef int32_t GLsizei;
typedef float GLfloat;
typedef double GLdouble;
typedef char GLchar;
typedef intptr_t GLintptr;
typedef std::size_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync* GLsync;

typedef void (APIENTRY* GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);

constexpr uint32_t GL_DEPTH_BUFFER_BIT = 0x00000100;
constexpr uint32_t GL_STENCIL_BUFFER_BIT = 0x00000400;
constexpr uint32_t GL_COLOR_BUFFER_BIT = 0x00004000;
constexpr uint32_t GL_FALSE = 0;
constexpr uint32_t GL_TRUE = 1;
constexpr uint32_t GL_POINTS = 0x0000;
constexpr uint32_t GL_LINES = 0x0001;
constexpr uint32_t GL_LINE_LOOP = 0x0002;
constexpr uint32_t GL_LINE_STRIP = 0x0003;
constexpr uint32_t GL_TRIANGLES = 0x0004;
constexpr uint32_t GL_TRIANGLE_STRIP = 0x0005;
constexpr uint32_t GL_TRIANGLE_FAN = 0x0006;
constexpr uint32_t GL_NEVER = 0x0200;
constexpr uint32_t GL_LESS = 0x0201;
constexpr uint32_t GL_EQUAL = 0x0202;
constexpr uint32_t GL_LEQUAL = 0x0203;
constexpr uint32_t GL_GREATER = 0x0204;
constexpr uint32_t GL_NOTEQUAL = 0x0205;
constexpr uint32_t GL_GEQUAL = 0x0206;
constexpr uint32_t GL_ALWAYS = 0x0207;
constexpr uint32_t GL_ZERO = 0;
constexpr uint32_t GL_ONE = 1;
constexpr uint32_t GL_SRC_COLOR = 0x0300;
constexpr uint32_t GL_ONE_MINUS_SRC_COLOR = 0x0301;
constexpr uint32_t GL_SRC_ALPHA = 0x0302;
constexpr uint32_t GL_ONE_MINUS_SRC_ALPHA = 0x0303;
constexpr uint32_t GL_DST_ALPHA = 0x0304;
constexpr uint32_t GL_ONE_MINUS_DST_ALPHA = 0x0305;
constexpr uint32_t GL_DST_COLOR = 0x0306;
constexpr uint32_t GL_ONE_MINUS_DST_COLOR = 0x0307;
constexpr uint32_t GL_SRC_ALPHA_SATURATE = 0x0308;
constexpr uint32_t GL_NONE = 0;
constexpr uint32_t GL_FRONT_LEFT = 0x0400;
constexpr uint32_t GL_FRONT_RIGHT = 0x0401;
constexpr uint32_t GL_BACK_LEFT = 0x0402;
constexpr uint32_t GL_BACK_RIGHT = 0x0403;
constexpr uint32_t GL_FRONT = 0x0404;
constexpr uint32_t GL_BACK = 0x0405;
constexpr uint32_t GL_LEFT = 0x0406;
constexpr uint32_t GL_RIGHT = 0x0407;
constexpr uint32_t GL_FRONT_AND_BACK = 0x0408;
constexpr uint32_t GL_NO_ERROR = 0;
constexpr uint32_t GL_INVALID_ENUM = 0x0500;
constexpr uint32_t GL_INVALID_VALUE = 0x0501;
constexpr uint32_t GL_INVALID_OPERATION = 0x0502;
constexpr uint32_t GL_OUT_OF_MEMORY = 0x0505;
constexpr uint32_t GL_CW = 0x0900;
constexpr uint32_t GL_CCW = 0x0901;
constexpr uint32_t GL_POINT_SIZE = 0x0B11;
constexpr uint32_t GL_POINT_SIZE_RANGE = 0x0B12;
constexpr uint32_t GL_POINT_SIZE_GRANULARITY = 0x0B13;
constexpr uint32_t GL_LINE_SMOOTH = 0x0B20;
constexpr uint32_t GL_LINE_WIDTH = 0x0B21;
constexpr uint32_t GL_LINE_WIDTH_RANGE = 0x0B22;
constexpr uint32_t GL_LINE_WIDTH_GRANULARITY = 0x0B23;
constexpr uint32_t GL_POLYGON_MODE = 0x0B40;
constexpr uint32_t GL_POLYGON_SMOOTH = 0x0B41;
constexpr uint32_t GL_CULL_FACE = 0x0B44;
constexpr uint32_t GL_CULL_FACE_MODE = 0x0B45;
constexpr uint32_t GL_FRONT_FACE = 0x0B46;
constexpr uint32_t GL_DEPTH_RANGE = 0x0B70;
constexpr uint32_t GL_DEPTH_TEST = 0x0B71;
constexpr uint32_t GL_DEPTH_WRITEMASK = 0x0B72;
constexpr uint32_t GL_DEPTH_CLEAR_VALUE = 0x0B73;
constexpr uint32_t GL_DEPTH_FUNC = 0x0B74;
constexpr uint32_t GL_STENCIL_TEST = 0x0B90;
constexpr uint32_t GL_STENCIL_CLEAR_VALUE = 0x0B91;
constexpr uint32_t GL_STENCIL_FUNC = 0x0B92;
constexpr uint32_t GL_STENCIL_VALUE_MASK = 0x0B93;
constexpr uint32_t GL_STENCIL_FAIL = 0x0B94;
constexpr uint32_t GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
constexpr uint32_t GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
constexpr uint32_t GL_STENCIL_REF = 0x0B97;
constexpr uint32_t GL_STENCIL_WRITEMASK = 0x0B98;
constexpr uint32_t GL_VIEWPORT = 0x0BA2;
constexpr uint32_t GL_DITHER = 0x0BD0;
constexpr uint32_t GL_BLEND_DST = 0x0BE0;
constexpr uint32_t GL_BLEND_SRC = 0x0BE1;
constexpr uint32_t GL_BLEND = 0x0BE2;
constexpr uint32_t GL_LOGIC_OP_MODE = 0x0BF0;
constexpr uint32_t GL_DRAW_BUFFER = 0x0C01;
constexpr uint32_t GL_READ_BUFFER = 0x0C02;
constexpr uint32_t GL_SCISSOR_BOX = 0x0C10;
constexpr uint32_t GL_SCISSOR_TEST = 0x0C11;
constexpr uint32_t GL_COLOR_CLEAR_VALUE = 0x0C22;
constexpr uint32_t GL_COLOR_WRITEMASK = 0x0C23;
constexpr uint32_t GL_DOUBLEBUFFER = 0x0C32;
constexpr uint32_t GL_STEREO = 0x0C33;
constexpr uint32_t GL_LINE_SMOOTH_HINT = 0x0C52;
constexpr uint32_t GL_POLYGON_SMOOTH_HINT = 0x0C53;
constexpr uint32_t GL_UNPACK_SWAP_BYTES = 0x0CF0;
constexpr uint32_t GL_UNPACK_LSB_FIRST = 0x0CF1;
constexpr uint32_t GL_UNPACK_ROW_LENGTH = 0x0CF2;
constexpr uint32_t GL_UNPACK_SKIP_ROWS = 0x0CF3;
constexpr uint32_t GL_UNPACK_SKIP_PIXELS = 0x0CF4;
constexpr uint32_t GL_UNPACK_ALIGNMENT = 0x0CF5;
constexpr uint32_t GL_PACK_SWAP_BYTES = 0x0D00;
constexpr uint32_t GL_PACK_LSB_FIRST = 0x0D01;
constexpr uint32_t GL_PACK_ROW_LENGTH = 0x0D02;
constexpr uint32_t GL_PACK_SKIP_ROWS = 0x0D03;
constexpr uint32_t GL_PACK_SKIP_PIXELS = 0x0D04;
constexpr uint32_t GL_PACK_ALIGNMENT = 0x0D05;
constexpr uint32_t GL_MAX_TEXTURE_SIZE = 0x0D33;
constexpr uint32_t GL_MAX_VIEWPORT_DIMS = 0x0D3A;
constexpr uint32_t GL_SUBPIXEL_BITS = 0x0D50;
constexpr uint32_t GL_TEXTURE_1D = 0x0DE0;
constexpr uint32_t GL_TEXTURE_2D = 0x0DE1;
constexpr uint32_t GL_TEXTURE_WIDTH = 0x1000;
constexpr uint32_t GL_TEXTURE_HEIGHT = 0x1001;
constexpr uint32_t GL_TEXTURE_BORDER_COLOR = 0x1004;
constexpr uint32_t GL_DONT_CARE = 0x1100;
constexpr uint32_t GL_FASTEST = 0x1101;
constexpr uint32_t GL_NICEST = 0x1102;
constexpr uint32_t GL_BYTE = 0x1400;
constexpr uint32_t GL_UNSIGNED_BYTE = 0x1401;
constexpr uint32_t GL_SHORT = 0x1402;
constexpr uint32_t GL_UNSIGNED_SHORT = 0x1403;
constexpr uint32_t GL_INT = 0x1404;
constexpr uint32_t GL_UNSIGNED_INT = 0x1405;
constexpr uint32_t GL_FLOAT = 0x1406;
constexpr uint32_t GL_CLEAR = 0x1500;
constexpr uint32_t GL_AND = 0x1501;
constexpr uint32_t GL_AND_REVERSE = 0x1502;
constexpr uint32_t GL_COPY = 0x1503;
constexpr uint32_t GL_AND_INVERTED = 0x1504;
constexpr uint32_t GL_NOOP = 0x1505;
constexpr uint32_t GL_XOR = 0x1506;
constexpr uint32_t GL_OR = 0x1507;
constexpr uint32_t GL_NOR = 0x1508;
constexpr uint32_t GL_EQUIV = 0x1509;
constexpr uint32_t GL_INVERT = 0x150A;
constexpr uint32_t GL_OR_REVERSE = 0x150B;
constexpr uint32_t GL_COPY_INVERTED = 0x150C;
constexpr uint32_t GL_OR_INVERTED = 0x150D;
constexpr uint32_t GL_NAND = 0x150E;
constexpr uint32_t GL_SET = 0x150F;
constexpr uint32_t GL_TEXTURE = 0x1702;
constexpr uint32_t GL_COLOR = 0x1800;
constexpr uint32_t GL_DEPTH = 0x1801;
constexpr uint32_t GL_STENCIL = 0x1802;
constexpr uint32_t GL_STENCIL_INDEX = 0x1901;
constexpr uint32_t GL_DEPTH_COMPONENT = 0x1902;
constexpr uint32_t GL_RED = 0x1903;
constexpr uint32_t GL_GREEN = 0x1904;
constexpr uint32_t GL_BLUE = 0x1905;
constexpr uint32_t GL_ALPHA = 0x1906;
constexpr uint32_t GL_RGB = 0x1907;
constexpr uint32_t GL_RGBA = 0x1908;
constexpr uint32_t GL_POINT = 0x1B00;
constexpr uint32_t GL_LINE = 0x1B01;
constexpr uint32_t GL_FILL = 0x1B02;
constexpr uint32_t GL_KEEP = 0x1E00;
constexpr uint32_t GL_REPLACE = 0x1E01;
constexpr uint32_t GL_INCR = 0x1E02;
constexpr uint32_t GL_DECR = 0x1E03;
constexpr uint32_t GL_VENDOR = 0x1F00;
constexpr uint32_t GL_RENDERER = 0x1F01;
constexpr uint32_t GL_VERSION = 0x1F02;
constexpr uint32_t GL_EXTENSIONS = 0x1F03;
constexpr uint32_t GL_NEAREST = 0x2600;
constexpr uint32_t GL_LINEAR = 0x2601;
constexpr uint32_t GL_NEAREST_MIPMAP_NEAREST = 0x2700;
constexpr uint32_t GL_LINEAR_MIPMAP_NEAREST = 0x2701;
constexpr uint32_t GL_NEAREST_MIPMAP_LINEAR = 0x2702;
constexpr uint32_t GL_LINEAR_MIPMAP_LINEAR = 0x2703;
constexpr uint32_t GL_TEXTURE_MAG_FILTER = 0x2800;
constexpr uint32_t GL_TEXTURE_MIN_FILTER = 0x2801;
constexpr uint32_t GL_TEXTURE_WRAP_S = 0x2802;
constexpr uint32_t GL_TEXTURE_WRAP_T = 0x2803;
constexpr uint32_t GL_REPEAT = 0x2901;
constexpr uint32_t GL_COLOR_LOGIC_OP = 0x0BF2;
constexpr uint32_t GL_POLYGON_OFFSET_UNITS = 0x2A00;
constexpr uint32_t GL_POLYGON_OFFSET_POINT = 0x2A01;
constexpr uint32_t GL_POLYGON_OFFSET_LINE = 0x2A02;
constexpr uint32_t GL_POLYGON_OFFSET_FILL = 0x8037;
constexpr uint32_t GL_POLYGON_OFFSET_FACTOR = 0x8038;
constexpr uint32_t GL_TEXTURE_BINDING_1D = 0x8068;
constexpr uint32_t GL_TEXTURE_BINDING_2D = 0x8069;
constexpr uint32_t GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
constexpr uint32_t GL_TEXTURE_RED_SIZE = 0x805C;
constexpr uint32_t GL_TEXTURE_GREEN_SIZE = 0x805D;
constexpr uint32_t GL_TEXTURE_BLUE_SIZE = 0x805E;
constexpr uint32_t GL_TEXTURE_ALPHA_SIZE = 0x805F;
constexpr uint32_t GL_DOUBLE = 0x140A;
constexpr uint32_t GL_PROXY_TEXTURE_1D = 0x8063;
constexpr uint32_t GL_PROXY_TEXTURE_2D = 0x8064;
constexpr uint32_t GL_R3_G3_B2 = 0x2A10;
constexpr uint32_t GL_RGB4 = 0x804F;
constexpr uint32_t GL_RGB5 = 0x8050;
constexpr uint32_t GL_RGB8 = 0x8051;
constexpr uint32_t GL_RGB10 = 0x8052;
constexpr uint32_t GL_RGB12 = 0x8053;
constexpr uint32_t GL_RGB16 = 0x8054;
constexpr uint32_t GL_RGBA2 = 0x8055;
constexpr uint32_t GL_RGBA4 = 0x8056;
constexpr uint32_t GL_RGB5_A1 = 0x8057;
constexpr uint32_t GL_RGBA8 = 0x8058;
constexpr uint32_t GL_RGB10_A2 = 0x8059;
constexpr uint32_t GL_RGBA12 = 0x805A;
constexpr uint32_t GL_RGBA16 = 0x805B;
constexpr uint32_t GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
constexpr uint32_t GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
constexpr uint32_t GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
constexpr uint32_t GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
constexpr uint32_t GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
constexpr uint32_t GL_TEXTURE_BINDING_3D = 0x806A;
constexpr uint32_t GL_PACK_SKIP_IMAGES = 0x806B;
constexpr uint32_t GL_PACK_IMAGE_HEIGHT = 0x806C;
constexpr uint32_t GL_UNPACK_SKIP_IMAGES = 0x806D;
constexpr uint32_t GL_UNPACK_IMAGE_HEIGHT = 0x806E;
constexpr uint32_t GL_TEXTURE_3D = 0x806F;
constexpr uint32_t GL_PROXY_TEXTURE_3D = 0x8070;
constexpr uint32_t GL_TEXTURE_DEPTH = 0x8071;
constexpr uint32_t GL_TEXTURE_WRAP_R = 0x8072;
constexpr uint32_t GL_MAX_3D_TEXTURE_SIZE = 0x8073;
constexpr uint32_t GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
constexpr uint32_t GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
constexpr uint32_t GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
constexpr uint32_t GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
constexpr uint32_t GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
constexpr uint32_t GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
constexpr uint32_t GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
constexpr uint32_t GL_BGR = 0x80E0;
constexpr uint32_t GL_BGRA = 0x80E1;
constexpr uint32_t GL_MAX_ELEMENTS_VERTICES = 0x80E8;
constexpr uint32_t GL_MAX_ELEMENTS_INDICES = 0x80E9;
constexpr uint32_t GL_CLAMP_TO_EDGE = 0x812F;
constexpr uint32_t GL_TEXTURE_MIN_LOD = 0x813A;
constexpr uint32_t GL_TEXTURE_MAX_LOD = 0x813B;
constexpr uint32_t GL_TEXTURE_BASE_LEVEL = 0x813C;
constexpr uint32_t GL_TEXTURE_MAX_LEVEL = 0x813D;
constexpr uint32_t GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
constexpr uint32_t GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
constexpr uint32_t GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
constexpr uint32_t GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
constexpr uint32_t GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
constexpr uint32_t GL_TEXTURE0 = 0x84C0;
constexpr uint32_t GL_TEXTURE1 = 0x84C1;
constexpr uint32_t GL_TEXTURE2 = 0x84C2;
constexpr uint32_t GL_TEXTURE3 = 0x84C3;
constexpr uint32_t GL_TEXTURE4 = 0x84C4;
constexpr uint32_t GL_TEXTURE5 = 0x84C5;
constexpr uint32_t GL_TEXTURE6 = 0x84C6;
constexpr uint32_t GL_TEXTURE7 = 0x84C7;
constexpr uint32_t GL_TEXTURE8 = 0x84C8;
constexpr uint32_t GL_TEXTURE9 = 0x84C9;
constexpr uint32_t GL_TEXTURE10 = 0x84CA;
constexpr uint32_t GL_TEXTURE11 = 0x84CB;
constexpr uint32_t GL_TEXTURE12 = 0x84CC;
constexpr uint32_t GL_TEXTURE13 = 0x84CD;
constexpr uint32_t GL_TEXTURE14 = 0x84CE;
constexpr uint32_t GL_TEXTURE15 = 0x84CF;
constexpr uint32_t GL_TEXTURE16 = 0x84D0;
constexpr uint32_t GL_TEXTURE17 = 0x84D1;
constexpr uint32_t GL_TEXTURE18 = 0x84D2;
constexpr uint32_t GL_TEXTURE19 = 0x84D3;
constexpr uint32_t GL_TEXTURE20 = 0x84D4;
constexpr uint32_t GL_TEXTURE21 = 0x84D5;
constexpr uint32_t GL_TEXTURE22 = 0x84D6;
constexpr uint32_t GL_TEXTURE23 = 0x84D7;
constexpr uint32_t GL_TEXTURE24 = 0x84D8;
constexpr uint32_t GL_TEXTURE25 = 0x84D9;
constexpr uint32_t GL_TEXTURE26 = 0x84DA;
constexpr uint32_t GL_TEXTURE27 = 0x84DB;
constexpr uint32_t GL_TEXTURE28 = 0x84DC;
constexpr uint32_t GL_TEXTURE29 = 0x84DD;
constexpr uint32_t GL_TEXTURE30 = 0x84DE;
constexpr uint32_t GL_TEXTURE31 = 0x84DF;
constexpr uint32_t GL_ACTIVE_TEXTURE = 0x84E0;
constexpr uint32_t GL_MULTISAMPLE = 0x809D;
constexpr uint32_t GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
constexpr uint32_t GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
constexpr uint32_t GL_SAMPLE_COVERAGE = 0x80A0;
constexpr uint32_t GL_SAMPLE_BUFFERS = 0x80A8;
constexpr uint32_t GL_SAMPLES = 0x80A9;
constexpr uint32_t GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
constexpr uint32_t GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
constexpr uint32_t GL_TEXTURE_CUBE_MAP = 0x8513;
constexpr uint32_t GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
constexpr uint32_t GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
constexpr uint32_t GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
constexpr uint32_t GL_COMPRESSED_RGB = 0x84ED;
constexpr uint32_t GL_COMPRESSED_RGBA = 0x84EE;
constexpr uint32_t GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
constexpr uint32_t GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
constexpr uint32_t GL_TEXTURE_COMPRESSED = 0x86A1;
constexpr uint32_t GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
constexpr uint32_t GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
constexpr uint32_t GL_CLAMP_TO_BORDER = 0x812D;
constexpr uint32_t GL_BLEND_DST_RGB = 0x80C8;
constexpr uint32_t GL_BLEND_SRC_RGB = 0x80C9;
constexpr uint32_t GL_BLEND_DST_ALPHA = 0x80CA;
constexpr uint32_t GL_BLEND_SRC_ALPHA = 0x80CB;
constexpr uint32_t GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
constexpr uint32_t GL_DEPTH_COMPONENT16 = 0x81A5;
constexpr uint32_t GL_DEPTH_COMPONENT24 = 0x81A6;
constexpr uint32_t GL_DEPTH_COMPONENT32 = 0x81A7;
constexpr uint32_t GL_MIRRORED_REPEAT = 0x8370;
constexpr uint32_t GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
constexpr uint32_t GL_TEXTURE_LOD_BIAS = 0x8501;
constexpr uint32_t GL_INCR_WRAP = 0x8507;
constexpr uint32_t GL_DECR_WRAP = 0x8508;
constexpr uint32_t GL_TEXTURE_DEPTH_SIZE = 0x884A;
constexpr uint32_t GL_TEXTURE_COMPARE_MODE = 0x884C;
constexpr uint32_t GL_TEXTURE_COMPARE_FUNC = 0x884D;
constexpr uint32_t GL_BLEND_COLOR = 0x8005;
constexpr uint32_t GL_BLEND_EQUATION = 0x8009;
constexpr uint32_t GL_CONSTANT_COLOR = 0x8001;
constexpr uint32_t GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
constexpr uint32_t GL_CONSTANT_ALPHA = 0x8003;
constexpr uint32_t GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
constexpr uint32_t GL_FUNC_ADD = 0x8006;
constexpr uint32_t GL_FUNC_REVERSE_SUBTRACT = 0x800B;
constexpr uint32_t GL_FUNC_SUBTRACT = 0x800A;
constexpr uint32_t GL_MIN = 0x8007;
constexpr uint32_t GL_MAX = 0x8008;
constexpr uint32_t GL_BUFFER_SIZE = 0x8764;
constexpr uint32_t GL_BUFFER_USAGE = 0x8765;
constexpr uint32_t GL_QUERY_COUNTER_BITS = 0x8864;
constexpr uint32_t GL_CURRENT_QUERY = 0x8865;
constexpr uint32_t GL_QUERY_RESULT = 0x8866;
constexpr uint32_t GL_QUERY_RESULT_AVAILABLE = 0x8867;
constexpr uint32_t GL_ARRAY_BUFFER = 0x8892;
constexpr uint32_t GL_ELEMENT_ARRAY_BUFFER = 0x8893;
constexpr uint32_t GL_ARRAY_BUFFER_BINDING = 0x8894;
constexpr uint32_t GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
constexpr uint32_t GL_READ_ONLY = 0x88B8;
constexpr uint32_t GL_WRITE_ONLY = 0x88B9;
constexpr uint32_t GL_READ_WRITE = 0x88BA;
constexpr uint32_t GL_BUFFER_ACCESS = 0x88BB;
constexpr uint32_t GL_BUFFER_MAPPED = 0x88BC;
constexpr uint32_t GL_BUFFER_MAP_POINTER = 0x88BD;
constexpr uint32_t GL_STREAM_DRAW = 0x88E0;
constexpr uint32_t GL_STREAM_READ = 0x88E1;
constexpr uint32_t GL_STREAM_COPY = 0x88E2;
constexpr uint32_t GL_STATIC_DRAW = 0x88E4;
constexpr uint32_t GL_STATIC_READ = 0x88E5;
constexpr uint32_t GL_STATIC_COPY = 0x88E6;
constexpr uint32_t GL_DYNAMIC_DRAW = 0x88E8;
constexpr uint32_t GL_DYNAMIC_READ = 0x88E9;
constexpr uint32_t GL_DYNAMIC_COPY = 0x88EA;
constexpr uint32_t GL_DYNAMIC_PASSED = 0x8914;
constexpr uint32_t GL_SRC1_ALPHA = 0x8589;
constexpr uint32_t GL_BLEND_EQUATION_RGB = 0x8009;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
constexpr uint32_t GL_CURRENT_VERTEX_ATTRIB = 0x8626;
constexpr uint32_t GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
constexpr uint32_t GL_STENCIL_BACK_FUNC = 0x8800;
constexpr uint32_t GL_STENCIL_BACK_FAIL = 0x8801;
constexpr uint32_t GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
constexpr uint32_t GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
constexpr uint32_t GL_MAX_DRAW_BUFFERS = 0x8824;
constexpr uint32_t GL_DRAW_BUFFER0 = 0x8825;
constexpr uint32_t GL_DRAW_BUFFER1 = 0x8826;
constexpr uint32_t GL_DRAW_BUFFER2 = 0x8827;
constexpr uint32_t GL_DRAW_BUFFER3 = 0x8828;
constexpr uint32_t GL_DRAW_BUFFER4 = 0x8829;
constexpr uint32_t GL_DRAW_BUFFER5 = 0x882A;
constexpr uint32_t GL_DRAW_BUFFER6 = 0x882B;
constexpr uint32_t GL_DRAW_BUFFER7 = 0x882C;
constexpr uint32_t GL_DRAW_BUFFER8 = 0x882D;
constexpr uint32_t GL_DRAW_BUFFER9 = 0x882E;
constexpr uint32_t GL_DRAW_BUFFER10 = 0x882F;
constexpr uint32_t GL_DRAW_BUFFER11 = 0x8830;
constexpr uint32_t GL_DRAW_BUFFER12 = 0x8831;
constexpr uint32_t GL_DRAW_BUFFER13 = 0x8832;
constexpr uint32_t GL_DRAW_BUFFER14 = 0x8833;
constexpr uint32_t GL_DRAW_BUFFER15 = 0x8834;
constexpr uint32_t GL_BLEND_EQUATION_ALPHA = 0x883D;
constexpr uint32_t GL_MAX_VERTEX_ATTRIBS = 0x8869;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
constexpr uint32_t GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
constexpr uint32_t GL_FRAGMENT_SHADER = 0x8B30;
constexpr uint32_t GL_VERTEX_SHADER = 0x8B31;
constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
constexpr uint32_t GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
constexpr uint32_t GL_MAX_VARYING_FLOATS = 0x8B4B;
constexpr uint32_t GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
constexpr uint32_t GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
constexpr uint32_t GL_SHADER_TYPE = 0x8B4F;
constexpr uint32_t GL_FLOAT_VEC2 = 0x8B50;
constexpr uint32_t GL_FLOAT_VEC3 = 0x8B51;
constexpr uint32_t GL_FLOAT_VEC4 = 0x8B52;
constexpr uint32_t GL_INT_VEC2 = 0x8B53;
constexpr uint32_t GL_INT_VEC3 = 0x8B54;
constexpr uint32_t GL_INT_VEC4 = 0x8B55;
constexpr uint32_t GL_BOOL = 0x8B56;
constexpr uint32_t GL_BOOL_VEC2 = 0x8B57;
constexpr uint32_t GL_BOOL_VEC3 = 0x8B58;
constexpr uint32_t GL_BOOL_VEC4 = 0x8B59;
constexpr uint32_t GL_FLOAT_MAT2 = 0x8B5A;
constexpr uint32_t GL_FLOAT_MAT3 = 0x8B5B;
constexpr uint32_t GL_FLOAT_MAT4 = 0x8B5C;
constexpr uint32_t GL_SAMPLER_1D = 0x8B5D;
constexpr uint32_t GL_SAMPLER_2D = 0x8B5E;
constexpr uint32_t GL_SAMPLER_3D = 0x8B5F;
constexpr uint32_t GL_SAMPLER_CUBE = 0x8B60;
constexpr uint32_t GL_SAMPLER_1D_SHADOW = 0x8B61;
constexpr uint32_t GL_SAMPLER_2D_SHADOW = 0x8B62;
constexpr uint32_t GL_DELETE_STATUS = 0x8B80;
constexpr uint32_t GL_COMPILE_STATUS = 0x8B81;
constexpr uint32_t GL_LINK_STATUS = 0x8B82;
constexpr uint32_t GL_VALIDATE_STATUS = 0x8B83;
constexpr uint32_t GL_INFO_LOG_LENGTH = 0x8B84;
constexpr uint32_t GL_ATTACHED_SHADERS = 0x8B85;
constexpr uint32_t GL_ACTIVE_UNIFORMS = 0x8B86;
constexpr uint32_t GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
constexpr uint32_t GL_SHADER_SOURCE_LENGTH = 0x8B88;
constexpr uint32_t GL_ACTIVE_ATTRIBUTES = 0x8B89;
constexpr uint32_t GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
constexpr uint32_t GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
constexpr uint32_t GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
constexpr uint32_t GL_CURRENT_PROGRAM = 0x8B8D;
constexpr uint32_t GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
constexpr uint32_t GL_LOWER_LEFT = 0x8CA1;
constexpr uint32_t GL_UPPER_LEFT = 0x8CA2;
constexpr uint32_t GL_STENCIL_BACK_REF = 0x8CA3;
constexpr uint32_t GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
constexpr uint32_t GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
constexpr uint32_t GL_PIXEL_PACK_BUFFER = 0x88EB;
constexpr uint32_t GL_PIXEL_UNPACK_BUFFER = 0x88EC;
constexpr uint32_t GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
constexpr uint32_t GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
constexpr uint32_t GL_FLOAT_MAT2x3 = 0x8B65;
constexpr uint32_t GL_FLOAT_MAT2x4 = 0x8B66;
constexpr uint32_t GL_FLOAT_MAT3x2 = 0x8B67;
constexpr uint32_t GL_FLOAT_MAT3x4 = 0x8B68;
constexpr uint32_t GL_FLOAT_MAT4x2 = 0x8B69;
constexpr uint32_t GL_FLOAT_MAT4x3 = 0x8B6A;
constexpr uint32_t GL_SRGB = 0x8C440;
constexpr uint32_t GL_SRGB8 = 0x8C41;
constexpr uint32_t GL_SRGB_ALPHA = 0x8C42;
constexpr uint32_t GL_SRGB8_ALPHA8 = 0x8C43;
constexpr uint32_t GL_COMPRESSED_SRGB = 0x8C48;
constexpr uint32_t GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
constexpr uint32_t GL_COMPARE_REF_TO_TEXTURE = 0x884E;
constexpr uint32_t GL_CLIP_DISTANCE0 = 0x3000;
constexpr uint32_t GL_CLIP_DISTANCE1 = 0x3001;
constexpr uint32_t GL_CLIP_DISTANCE2 = 0x3002;
constexpr uint32_t GL_CLIP_DISTANCE3 = 0x3003;
constexpr uint32_t GL_CLIP_DISTANCE4 = 0x3004;
constexpr uint32_t GL_CLIP_DISTANCE5 = 0x3005;
constexpr uint32_t GL_CLIP_DISTANCE6 = 0x3006;
constexpr uint32_t GL_CLIP_DISTANCE7 = 0x3007;
constexpr uint32_t GL_MAX_CLIP_DISTANCES = 0x0D32;
constexpr uint32_t GL_MAJOR_VERSION = 0x821B;
constexpr uint32_t GL_MINOR_VERSION = 0x821C;
constexpr uint32_t GL_NUM_EXTENSIONS = 0x821D;
constexpr uint32_t GL_CONTEXT_FLAGS = 0x821E;
constexpr uint32_t GL_COMPRESSED_RED = 0x8225;
constexpr uint32_t GL_COMPRESSED_RG = 0x8226;
constexpr uint32_t GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
constexpr uint32_t GL_RGBA32F = 0x8814;
constexpr uint32_t GL_RGB32F = 0x8815;
constexpr uint32_t GL_RGBA16F = 0x881A;
constexpr uint32_t GL_RGB16F = 0x881B;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
constexpr uint32_t GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
constexpr uint32_t GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
constexpr uint32_t GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
constexpr uint32_t GL_CLAMP_READ_COLOR = 0x891C;
constexpr uint32_t GL_FIXED_ONLY = 0x891D;
constexpr uint32_t GL_MAX_VARYING_COMPONENTS = 0x8B4B;
constexpr uint32_t GL_TEXTURE_1D_ARRAY = 0x8C18;
constexpr uint32_t GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
constexpr uint32_t GL_TEXTURE_2D_ARRAY = 0x8C1A;
constexpr uint32_t GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
constexpr uint32_t GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
constexpr uint32_t GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
constexpr uint32_t GL_R11F_G11F_B10F = 0x8C3A;
constexpr uint32_t GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
constexpr uint32_t GL_RGB9_E5 = 0x8C3D;
constexpr uint32_t GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
constexpr uint32_t GL_TEXTURE_SHARED_SIZE = 0x8C3F;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
constexpr uint32_t GL_PRIMITIVES_GENERATED = 0x8C87;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
constexpr uint32_t GL_RASTERIZER_DISCARD = 0x8C89;
constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
constexpr uint32_t GL_INTERLEAVED_ATTRIBS = 0x8C8C;
constexpr uint32_t GL_SEPARATE_ATTRIBS = 0x8C8D;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
constexpr uint32_t GL_RGBA32UI = 0x8D70;
constexpr uint32_t GL_RGB32UI = 0x8D71;
constexpr uint32_t GL_RGBA16UI = 0x8D76;
constexpr uint32_t GL_RGB16UI = 0x8D77;
constexpr uint32_t GL_RGBA8UI = 0x8D7C;
constexpr uint32_t GL_RGB8UI = 0x8D7D;
constexpr uint32_t GL_RGBA32I = 0x8D82;
constexpr uint32_t GL_RGB32I = 0x8D83;
constexpr uint32_t GL_RGBA16I = 0x8D88;
constexpr uint32_t GL_RGB16I = 0x8D89;
constexpr uint32_t GL_RGBA8I = 0x8D8E;
constexpr uint32_t GL_RGB8I = 0x8D8F;
constexpr uint32_t GL_RED_INTEGER = 0x8D94;
constexpr uint32_t GL_GREEN_INTEGER = 0x8D95;
constexpr uint32_t GL_BLUE_INTEGER = 0x8D96;
constexpr uint32_t GL_RGB_INTEGER = 0x8D98;
constexpr uint32_t GL_RGBA_INTEGER = 0x8D99;
constexpr uint32_t GL_BGR_INTEGER = 0x8D9A;
constexpr uint32_t GL_BGRA_INTEGER = 0x8D9B;
constexpr uint32_t GL_SAMPLER_1D_ARRAY = 0x8DC0;
constexpr uint32_t GL_SAMPLER_2D_ARRAY = 0x8DC1;
constexpr uint32_t GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
constexpr uint32_t GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
constexpr uint32_t GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
constexpr uint32_t GL_UNSIGNED_INT_VEC2 = 0x8DC6;
constexpr uint32_t GL_UNSIGNED_INT_VEC3 = 0x8DC7;
constexpr uint32_t GL_UNSIGNED_INT_VEC4 = 0x8DC8;
constexpr uint32_t GL_INT_SAMPLER_1D = 0x8DC9;
constexpr uint32_t GL_INT_SAMPLER_2D = 0x8DCA;
constexpr uint32_t GL_INT_SAMPLER_3D = 0x8DCB;
constexpr uint32_t GL_INT_SAMPLER_CUBE = 0x8DCC;
constexpr uint32_t GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
constexpr uint32_t GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
constexpr uint32_t GL_QUERY_WAIT = 0x8E13;
constexpr uint32_t GL_QUERY_NO_WAIT = 0x8E14;
constexpr uint32_t GL_QUERY_BY_REGION_WAIT = 0x8E15;
constexpr uint32_t GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
constexpr uint32_t GL_BUFFER_ACCESS_FLAGS = 0x911F;
constexpr uint32_t GL_BUFFER_MAP_LENGTH = 0x9120;
constexpr uint32_t GL_BUFFER_MAP_OFFSET = 0x9121;
constexpr uint32_t GL_DEPTH_COMPONENT32F = 0x8CAC;
constexpr uint32_t GL_DEPTH32F_STENCIL8 = 0x8CAD;
constexpr uint32_t GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
constexpr uint32_t GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT = 0x8218;
constexpr uint32_t GL_FRAMEBUFFER_UNDEFINED = 0x8219;
constexpr uint32_t GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
constexpr uint32_t GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
constexpr uint32_t GL_DEPTH_STENCIL = 0x84F9;
constexpr uint32_t GL_UNSIGNED_INT_24_8 = 0x84FA;
constexpr uint32_t GL_DEPTH24_STENCIL8 = 0x88F0;
constexpr uint32_t GL_TEXTURE_STENCIL_SIZE = 0x88F1;
constexpr uint32_t GL_TEXTURE_RED_TYPE = 0x8C10;
constexpr uint32_t GL_TEXTURE_GREEN_TYPE = 0x8C11;
constexpr uint32_t GL_TEXTURE_BLUE_TYPE = 0x8C12;
constexpr uint32_t GL_TEXTURE_ALPHA_TYPE = 0x8C13;
constexpr uint32_t GL_TEXTURE_DEPTH_TYPE = 0x8C16;
constexpr uint32_t GL_UNSIGNED_NORMALIZED = 0x8C17;
constexpr uint32_t GL_FRAMEBUFFER_BINDING = 0x8CA6;
constexpr uint32_t GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
constexpr uint32_t GL_RENDERBUFFER_BINDING = 0x8CA7;
constexpr uint32_t GL_READ_FRAMEBUFFER = 0x8CA8;
constexpr uint32_t GL_DRAW_FRAMEBUFFER = 0x8CA9;
constexpr uint32_t GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
constexpr uint32_t GL_RENDERBUFFER_SAMPLES = 0x8CAB;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
constexpr uint32_t GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
constexpr uint32_t GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
constexpr uint32_t GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
constexpr uint32_t GL_COLOR_ATTACHMENT0 = 0x8CE0;
constexpr uint32_t GL_COLOR_ATTACHMENT1 = 0x8CE1;
constexpr uint32_t GL_COLOR_ATTACHMENT2 = 0x8CE2;
constexpr uint32_t GL_COLOR_ATTACHMENT3 = 0x8CE3;
constexpr uint32_t GL_COLOR_ATTACHMENT4 = 0x8CE4;
constexpr uint32_t GL_COLOR_ATTACHMENT5 = 0x8CE5;
constexpr uint32_t GL_COLOR_ATTACHMENT6 = 0x8CE6;
constexpr uint32_t GL_COLOR_ATTACHMENT7 = 0x8CE7;
constexpr uint32_t GL_COLOR_ATTACHMENT8 = 0x8CE8;
constexpr uint32_t GL_COLOR_ATTACHMENT9 = 0x8CE9;
constexpr uint32_t GL_COLOR_ATTACHMENT10 = 0x8CEA;
constexpr uint32_t GL_COLOR_ATTACHMENT11 = 0x8CEB;
constexpr uint32_t GL_COLOR_ATTACHMENT12 = 0x8CEC;
constexpr uint32_t GL_COLOR_ATTACHMENT13 = 0x8CED;
constexpr uint32_t GL_COLOR_ATTACHMENT14 = 0x8CEE;
constexpr uint32_t GL_COLOR_ATTACHMENT15 = 0x8CEF;
constexpr uint32_t GL_COLOR_ATTACHMENT16 = 0x8CF0;
constexpr uint32_t GL_COLOR_ATTACHMENT17 = 0x8CF1;
constexpr uint32_t GL_COLOR_ATTACHMENT18 = 0x8CF2;
constexpr uint32_t GL_COLOR_ATTACHMENT19 = 0x8CF3;
constexpr uint32_t GL_COLOR_ATTACHMENT20 = 0x8CF4;
constexpr uint32_t GL_COLOR_ATTACHMENT21 = 0x8CF5;
constexpr uint32_t GL_COLOR_ATTACHMENT22 = 0x8CF6;
constexpr uint32_t GL_COLOR_ATTACHMENT23 = 0x8CF7;
constexpr uint32_t GL_COLOR_ATTACHMENT24 = 0x8CF8;
constexpr uint32_t GL_COLOR_ATTACHMENT25 = 0x8CF9;
constexpr uint32_t GL_COLOR_ATTACHMENT26 = 0x8CFA;
constexpr uint32_t GL_COLOR_ATTACHMENT27 = 0x8CFB;
constexpr uint32_t GL_COLOR_ATTACHMENT28 = 0x8CFC;
constexpr uint32_t GL_COLOR_ATTACHMENT29 = 0x8CFD;
constexpr uint32_t GL_COLOR_ATTACHMENT30 = 0x8CFE;
constexpr uint32_t GL_COLOR_ATTACHMENT31 = 0x8CFF;
constexpr uint32_t GL_DEPTH_ATTACHMENT = 0x8D00;
constexpr uint32_t GL_STENCIL_ATTACHMENT = 0x8D20;
constexpr uint32_t GL_FRAMEBUFFER = 0x8D40;
constexpr uint32_t GL_RENDERBUFFER = 0x8D41;
constexpr uint32_t GL_RENDERBUFFER_WIDTH = 0x8D42;
constexpr uint32_t GL_RENDERBUFFER_HEIGHT = 0x8D43;
constexpr uint32_t GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
constexpr uint32_t GL_STENCIL_INDEX1 = 0x8D46;
constexpr uint32_t GL_STENCIL_INDEX4 = 0x8D47;
constexpr uint32_t GL_STENCIL_INDEX8 = 0x8D48;
constexpr uint32_t GL_STENCIL_INDEX16 = 0x8D49;
constexpr uint32_t GL_RENDERBUFFER_RED_SIZE = 0x8D50;
constexpr uint32_t GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
constexpr uint32_t GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
constexpr uint32_t GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
constexpr uint32_t GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
constexpr uint32_t GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
constexpr uint32_t GL_MAX_SAMPLES = 0x8D57;
constexpr uint32_t GL_FRAMEBUFFER_SRGB = 0x8DB9;
constexpr uint32_t GL_HALF_FLOAT = 0x140B;
constexpr uint32_t GL_MAP_READ_BIT = 0x0001;
constexpr uint32_t GL_MAP_WRITE_BIT = 0x0002;
constexpr uint32_t GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
constexpr uint32_t GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
constexpr uint32_t GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
constexpr uint32_t GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
constexpr uint32_t GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
constexpr uint32_t GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
constexpr uint32_t GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
constexpr uint32_t GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
constexpr uint32_t GL_RG = 0x8227;
constexpr uint32_t GL_RG_INTEGER = 0x8228;
constexpr uint32_t GL_R8 = 0x8229;
constexpr uint32_t GL_R16 = 0x822A;
constexpr uint32_t GL_RG8 = 0x822B;
constexpr uint32_t GL_RG16 = 0x822C;
constexpr uint32_t GL_R16F = 0x822D;
constexpr uint32_t GL_R32F = 0x822E;
constexpr uint32_t GL_RG16F = 0x822F;
constexpr uint32_t GL_RG32F = 0x8230;
constexpr uint32_t GL_R8I = 0x8231;
constexpr uint32_t GL_R8UI = 0x8232;
constexpr uint32_t GL_R16I = 0x8233;
constexpr uint32_t GL_R16UI = 0x8234;
constexpr uint32_t GL_R32I = 0x8235;
constexpr uint32_t GL_R32UI = 0x8236;
constexpr uint32_t GL_RG8I = 0x8237;
constexpr uint32_t GL_RG8UI = 0x8238;
constexpr uint32_t GL_RG16I = 0x8239;
constexpr uint32_t GL_RG16UI = 0x823A;
constexpr uint32_t GL_RG32I = 0x823B;
constexpr uint32_t GL_RG32UI = 0x823C;
constexpr uint32_t GL_VERTEX_ARRAY_BINDING = 0x85B5;
constexpr uint32_t GL_SAMPLER_2D_RECT = 0x8B63;
constexpr uint32_t GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
constexpr uint32_t GL_SAMPLER_BUFFER = 0x8DC2;
constexpr uint32_t GL_INT_SAMPLER_2D_RECT = 0x8DCD;
constexpr uint32_t GL_INT_SAMPLER_BUFFER = 0x8DD0;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
constexpr uint32_t GL_TEXTURE_BUFFER = 0x8C2A;
constexpr uint32_t GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
constexpr uint32_t GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
constexpr uint32_t GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
constexpr uint32_t GL_TEXTURE_RECTANGLE = 0x84F5;
constexpr uint32_t GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
constexpr uint32_t GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
constexpr uint32_t GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
constexpr uint32_t GL_R8_SNORM = 0x8F94;
constexpr uint32_t GL_RG8_SNORM = 0x8F95;
constexpr uint32_t GL_RGB8_SNORM = 0x8F96;
constexpr uint32_t GL_RGBA8_SNORM = 0x8F97;
constexpr uint32_t GL_R16_SNORM = 0x8F98;
constexpr uint32_t GL_RG16_SNORM = 0x8F99;
constexpr uint32_t GL_RGB16_SNORM = 0x8F9A;
constexpr uint32_t GL_RGBA16_SNORM = 0x8F9B;
constexpr uint32_t GL_SIGNED_NORMALIZED = 0x8F9C;
constexpr uint32_t GL_PRIMITIVE_RESTART = 0x8F9D;
constexpr uint32_t GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
constexpr uint32_t GL_COPY_READ_BUFFER = 0x8F36;
constexpr uint32_t GL_COPY_WRITE_BUFFER = 0x8F37;
constexpr uint32_t GL_UNIFORM_BUFFER = 0x8A11;
constexpr uint32_t GL_UNIFORM_BUFFER_BINDING = 0x8A28;
constexpr uint32_t GL_UNIFORM_BUFFER_START = 0x8A29;
constexpr uint32_t GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
constexpr uint32_t GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
constexpr uint32_t GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
constexpr uint32_t GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
constexpr uint32_t GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
constexpr uint32_t GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
constexpr uint32_t GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
constexpr uint32_t GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
constexpr uint32_t GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
constexpr uint32_t GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
constexpr uint32_t GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
constexpr uint32_t GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
constexpr uint32_t GL_UNIFORM_TYPE = 0x8A37;
constexpr uint32_t GL_UNIFORM_SIZE = 0x8A38;
constexpr uint32_t GL_UNIFORM_NAME_LENGTH = 0x8A39;
constexpr uint32_t GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
constexpr uint32_t GL_UNIFORM_OFFSET = 0x8A3B;
constexpr uint32_t GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
constexpr uint32_t GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
constexpr uint32_t GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
constexpr uint32_t GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
constexpr uint32_t GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
constexpr uint32_t GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
constexpr uint32_t GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
constexpr uint32_t GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
constexpr uint32_t GL_INVALID_INDEX = 0xFFFFFFFF;
constexpr uint32_t GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
constexpr uint32_t GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
constexpr uint32_t GL_LINES_ADJACENCY = 0x000A;
constexpr uint32_t GL_LINE_STRIP_ADJACENCY = 0x000B;
constexpr uint32_t GL_TRIANGLES_ADJACENCY = 0x000C;
constexpr uint32_t GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
constexpr uint32_t GL_PROGRAM_POINT_SIZE = 0x8642;
constexpr uint32_t GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
constexpr uint32_t GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
constexpr uint32_t GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
constexpr uint32_t GL_GEOMETRY_SHADER = 0x8DD9;
constexpr uint32_t GL_GEOMETRY_VERTICES_OUT = 0x8916;
constexpr uint32_t GL_GEOMETRY_INPUT_TYPE = 0x8917;
constexpr uint32_t GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
constexpr uint32_t GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
constexpr uint32_t GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
constexpr uint32_t GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
constexpr uint32_t GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
constexpr uint32_t GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
constexpr uint32_t GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
constexpr uint32_t GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
constexpr uint32_t GL_CONTEXT_PROFILE_MASK = 0x9126;
constexpr uint32_t GL_DEPTH_CLAMP = 0x864F;
constexpr uint32_t GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
constexpr uint32_t GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
constexpr uint32_t GL_LAST_VERTEX_CONVENTION = 0x8E4E;
constexpr uint32_t GL_PROVOKING_VERTEX = 0x8E4F;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
constexpr uint32_t GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
constexpr uint32_t GL_OBJECT_TYPE = 0x9112;
constexpr uint32_t GL_SYNC_CONDITION = 0x9113;
constexpr uint32_t GL_SYNC_STATUS = 0x9114;
constexpr uint32_t GL_SYNC_FLAGS = 0x9115;
constexpr uint32_t GL_SYNC_FENCE = 0x9116;
constexpr uint32_t GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
constexpr uint32_t GL_UNSIGNALED = 0x9118;
constexpr uint32_t GL_SIGNALED = 0x9119;
constexpr uint32_t GL_ALREADY_SIGNALED = 0x911A;
constexpr uint32_t GL_TIMEOUT_EXPIRED = 0x911B;
constexpr uint32_t GL_CONDITION_SATISFIED = 0x911C;
constexpr uint32_t GL_WAIT_FAILED = 0x911D;
constexpr uint64_t GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
constexpr uint32_t GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
constexpr uint32_t GL_SAMPLE_POSITION = 0x8E50;
constexpr uint32_t GL_SAMPLE_MASK = 0x8E51;
constexpr uint32_t GL_SAMPLE_MASK_VALUE = 0x8E52;
constexpr uint32_t GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
constexpr uint32_t GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
constexpr uint32_t GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
constexpr uint32_t GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
constexpr uint32_t GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
constexpr uint32_t GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
constexpr uint32_t GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
constexpr uint32_t GL_TEXTURE_SAMPLES = 0x9106;
constexpr uint32_t GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
constexpr uint32_t GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
constexpr uint32_t GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
constexpr uint32_t GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
constexpr uint32_t GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
constexpr uint32_t GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
constexpr uint32_t GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
constexpr uint32_t GL_MAX_INTEGER_SAMPLES = 0x9110;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
constexpr uint32_t GL_SRC1_COLOR = 0x88F9;
constexpr uint32_t GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
constexpr uint32_t GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
constexpr uint32_t GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
constexpr uint32_t GL_ANY_SAMPLES_PASSED = 0x8C2F;
constexpr uint32_t GL_SAMPLER_BINDING = 0x8919;
constexpr uint32_t GL_RGB10_A2UI = 0x906F;
constexpr uint32_t GL_TEXTURE_SWIZZLE_R = 0x8E42;
constexpr uint32_t GL_TEXTURE_SWIZZLE_G = 0x8E43;
constexpr uint32_t GL_TEXTURE_SWIZZLE_B = 0x8E44;
constexpr uint32_t GL_TEXTURE_SWIZZLE_A = 0x8E45;
constexpr uint32_t GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
constexpr uint32_t GL_TIME_ELAPSED = 0x88BF;
constexpr uint32_t GL_TIMESTAMP = 0x8E28;
constexpr uint32_t GL_INT_2_10_10_10_REV = 0x8D9F;
constexpr uint32_t GL_SAMPLE_SHADING = 0x8C36;
constexpr uint32_t GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
constexpr uint32_t GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
constexpr uint32_t GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
constexpr uint32_t GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
constexpr uint32_t GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
constexpr uint32_t GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
constexpr uint32_t GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
constexpr uint32_t GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
constexpr uint32_t GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
constexpr uint32_t GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
constexpr uint32_t GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
constexpr uint32_t GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
constexpr uint32_t GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
constexpr uint32_t GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
constexpr uint32_t GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
constexpr uint32_t GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
constexpr uint32_t GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
constexpr uint32_t GL_MAX_VERTEX_STREAMS = 0x8E71;
constexpr uint32_t GL_DOUBLE_VEC2 = 0x8FFC;
constexpr uint32_t GL_DOUBLE_VEC3 = 0x8FFD;
constexpr uint32_t GL_DOUBLE_VEC4 = 0x8FFE;
constexpr uint32_t GL_DOUBLE_MAT2 = 0x8F46;
constexpr uint32_t GL_DOUBLE_MAT3 = 0x8F47;
constexpr uint32_t GL_DOUBLE_MAT4 = 0x8F48;
constexpr uint32_t GL_DOUBLE_MAT2x3 = 0x8F49;
constexpr uint32_t GL_DOUBLE_MAT2x4 = 0x8F4A;
constexpr uint32_t GL_DOUBLE_MAT3x2 = 0x8F4B;
constexpr uint32_t GL_DOUBLE_MAT3x4 = 0x8F4C;
constexpr uint32_t GL_DOUBLE_MAT4x2 = 0x8F4D;
constexpr uint32_t GL_DOUBLE_MAT4x3 = 0x8F4E;
constexpr uint32_t GL_ACTIVE_SUBROUTINES = 0x8DE5;
constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
constexpr uint32_t GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
constexpr uint32_t GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
constexpr uint32_t GL_MAX_SUBROUTINES = 0x8DE7;
constexpr uint32_t GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
constexpr uint32_t GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
constexpr uint32_t GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
constexpr uint32_t GL_PATCHES = 0x000E;
constexpr uint32_t GL_PATCH_VERTICES = 0x8E72;
constexpr uint32_t GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
constexpr uint32_t GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
constexpr uint32_t GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
constexpr uint32_t GL_TESS_GEN_MODE = 0x8E76;
constexpr uint32_t GL_TESS_GEN_SPACING = 0x8E77;
constexpr uint32_t GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
constexpr uint32_t GL_TESS_GEN_POINT_MODE = 0x8E79;
constexpr uint32_t GL_ISOLINES = 0x8E7A;
constexpr uint32_t GL_QUADS = 0x0007;
constexpr uint32_t GL_FRACTIONAL_ODD = 0x8E7B;
constexpr uint32_t GL_FRACTIONAL_EVEN = 0x8E7C;
constexpr uint32_t GL_MAX_PATCH_VERTICES = 0x8E7D;
constexpr uint32_t GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
constexpr uint32_t GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
constexpr uint32_t GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
constexpr uint32_t GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
constexpr uint32_t GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
constexpr uint32_t GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
constexpr uint32_t GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
constexpr uint32_t GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
constexpr uint32_t GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
constexpr uint32_t GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
constexpr uint32_t GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
constexpr uint32_t GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
constexpr uint32_t GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
constexpr uint32_t GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
constexpr uint32_t GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
constexpr uint32_t GL_TESS_EVALUATION_SHADER = 0x8E87;
constexpr uint32_t GL_TESS_CONTROL_SHADER = 0x8E88;
constexpr uint32_t GL_TRANSFORM_FEEDBACK = 0x8E22;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
constexpr uint32_t GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
constexpr uint32_t GL_FIXED = 0x140C;
constexpr uint32_t GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
constexpr uint32_t GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
constexpr uint32_t GL_LOW_FLOAT = 0x8DF0;
constexpr uint32_t GL_MEDIUM_FLOAT = 0x8DF1;
constexpr uint32_t GL_HIGH_FLOAT = 0x8DF2;
constexpr uint32_t GL_LOW_INT = 0x8DF3;
constexpr uint32_t GL_MEDIUM_INT = 0x8DF4;
constexpr uint32_t GL_HIGH_INT = 0x8DF5;
constexpr uint32_t GL_SHADER_COMPILER = 0x8DFA;
constexpr uint32_t GL_SHADER_BINARY_FORMATS = 0x8DF8;
constexpr uint32_t GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
constexpr uint32_t GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
constexpr uint32_t GL_MAX_VARYING_VECTORS = 0x8DFC;
constexpr uint32_t GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
constexpr uint32_t GL_RGB565 = 0x8D62;
constexpr uint32_t GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
constexpr uint32_t GL_PROGRAM_BINARY_LENGTH = 0x8741;
constexpr uint32_t GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
constexpr uint32_t GL_PROGRAM_BINARY_FORMATS = 0x87FF;
constexpr uint32_t GL_VERTEX_SHADER_BIT = 0x00000001;
constexpr uint32_t GL_FRAGMENT_SHADER_BIT = 0x00000002;
constexpr uint32_t GL_GEOMETRY_SHADER_BIT = 0x00000004;
constexpr uint32_t GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
constexpr uint32_t GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
constexpr uint32_t GL_ALL_SHADER_BITS = 0xFFFFFFFF;
constexpr uint32_t GL_PROGRAM_SEPARABLE = 0x8258;
constexpr uint32_t GL_ACTIVE_PROGRAM = 0x8259;
constexpr uint32_t GL_PROGRAM_PIPELINE_BINDING = 0x825A;
constexpr uint32_t GL_MAX_VIEWPORTS = 0x825B;
constexpr uint32_t GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
constexpr uint32_t GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
constexpr uint32_t GL_LAYER_PROVOKING_VERTEX = 0x825E;
constexpr uint32_t GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
constexpr uint32_t GL_UNDEFINED_VERTEX = 0x8260;
constexpr uint32_t GL_COPY_READ_BUFFER_BINDING = 0x8F36;
constexpr uint32_t GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
constexpr uint32_t GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
constexpr uint32_t GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
constexpr uint32_t GL_NUM_SAMPLE_COUNTS = 0x9380;
constexpr uint32_t GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
constexpr uint32_t GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
constexpr uint32_t GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
constexpr uint32_t GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
constexpr uint32_t GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
constexpr uint32_t GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
constexpr uint32_t GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
constexpr uint32_t GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
constexpr uint32_t GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
constexpr uint32_t GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
constexpr uint32_t GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
constexpr uint32_t GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
constexpr uint32_t GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
constexpr uint32_t GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
constexpr uint32_t GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
constexpr uint32_t GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
constexpr uint32_t GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
constexpr uint32_t GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
constexpr uint32_t GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
constexpr uint32_t GL_UNIFORM_BARRIER_BIT = 0x00000004;
constexpr uint32_t GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
constexpr uint32_t GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
constexpr uint32_t GL_COMMAND_BARRIER_BIT = 0x00000040;
constexpr uint32_t GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
constexpr uint32_t GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
constexpr uint32_t GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
constexpr uint32_t GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
constexpr uint32_t GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
constexpr uint32_t GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
constexpr uint32_t GL_MAX_IMAGE_UNITS = 0x8F38;
constexpr uint32_t GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
constexpr uint32_t GL_IMAGE_BINDING_NAME = 0x8F3A;
constexpr uint32_t GL_IMAGE_BINDING_LEVEL = 0x8F3B;
constexpr uint32_t GL_IMAGE_BINDING_LAYERED = 0x8F3C;
constexpr uint32_t GL_IMAGE_BINDING_LAYER = 0x8F3D;
constexpr uint32_t GL_IMAGE_BINDING_ACCESS = 0x8F3E;
constexpr uint32_t GL_IMAGE_1D = 0x904C;
constexpr uint32_t GL_IMAGE_2D = 0x904D;
constexpr uint32_t GL_IMAGE_3D = 0x904E;
constexpr uint32_t GL_IMAGE_2D_RECT = 0x904F;
constexpr uint32_t GL_IMAGE_CUBE = 0x9050;
constexpr uint32_t GL_IMAGE_BUFFER = 0x9051;
constexpr uint32_t GL_IMAGE_1D_ARRAY = 0x9052;
constexpr uint32_t GL_IMAGE_2D_ARRAY = 0x9053;
constexpr uint32_t GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
constexpr uint32_t GL_IMAGE_2D_MULTISAMPLE = 0x9055;
constexpr uint32_t GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
constexpr uint32_t GL_INT_IMAGE_1D = 0x9057;
constexpr uint32_t GL_INT_IMAGE_2D = 0x9058;
constexpr uint32_t GL_INT_IMAGE_3D = 0x9059;
constexpr uint32_t GL_INT_IMAGE_2D_RECT = 0x905A;
constexpr uint32_t GL_INT_IMAGE_CUBE = 0x905B;
constexpr uint32_t GL_INT_IMAGE_BUFFER = 0x905C;
constexpr uint32_t GL_INT_IMAGE_1D_ARRAY = 0x905D;
constexpr uint32_t GL_INT_IMAGE_2D_ARRAY = 0x905E;
constexpr uint32_t GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
constexpr uint32_t GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
constexpr uint32_t GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
constexpr uint32_t GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
constexpr uint32_t GL_MAX_IMAGE_SAMPLES = 0x906D;
constexpr uint32_t GL_IMAGE_BINDING_FORMAT = 0x906E;
constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
constexpr uint32_t GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
constexpr uint32_t GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
constexpr uint32_t GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
constexpr uint32_t GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
constexpr uint32_t GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
constexpr uint32_t GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
constexpr uint32_t GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
constexpr uint32_t GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
constexpr uint32_t GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
constexpr uint32_t GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
constexpr uint32_t GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
constexpr uint32_t GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
constexpr uint32_t GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
constexpr uint32_t GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
constexpr uint32_t GL_COMPRESSED_RGB8_ETC2 = 0x9274;
constexpr uint32_t GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
constexpr uint32_t GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
constexpr uint32_t GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
constexpr uint32_t GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
constexpr uint32_t GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
constexpr uint32_t GL_COMPRESSED_R11_EAC = 0x9270;
constexpr uint32_t GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
constexpr uint32_t GL_COMPRESSED_RG11_EAC = 0x9272;
constexpr uint32_t GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
constexpr uint32_t GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
constexpr uint32_t GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
constexpr uint32_t GL_MAX_ELEMENT_INDEX = 0x8D6B;
constexpr uint32_t GL_COMPUTE_SHADER = 0x91B9;
constexpr uint32_t GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
constexpr uint32_t GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
constexpr uint32_t GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
constexpr uint32_t GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
constexpr uint32_t GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
constexpr uint32_t GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
constexpr uint32_t GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
constexpr uint32_t GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
constexpr uint32_t GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
constexpr uint32_t GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
constexpr uint32_t GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
constexpr uint32_t GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
constexpr uint32_t GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
constexpr uint32_t GL_COMPUTE_SHADER_BIT = 0x00000020;
constexpr uint32_t GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
constexpr uint32_t GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
constexpr uint32_t GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
constexpr uint32_t GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
constexpr uint32_t GL_DEBUG_SOURCE_API = 0x8246;
constexpr uint32_t GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
constexpr uint32_t GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
constexpr uint32_t GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
constexpr uint32_t GL_DEBUG_SOURCE_APPLICATION = 0x824A;
constexpr uint32_t GL_DEBUG_SOURCE_OTHER = 0x824B;
constexpr uint32_t GL_DEBUG_TYPE_ERROR = 0x824C;
constexpr uint32_t GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
constexpr uint32_t GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
constexpr uint32_t GL_DEBUG_TYPE_PORTABILITY = 0x824F;
constexpr uint32_t GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
constexpr uint32_t GL_DEBUG_TYPE_OTHER = 0x8251;
constexpr uint32_t GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
constexpr uint32_t GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
constexpr uint32_t GL_DEBUG_LOGGED_MESSAGES = 0x9145;
constexpr uint32_t GL_DEBUG_SEVERITY_HIGH = 0x9146;
constexpr uint32_t GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
constexpr uint32_t GL_DEBUG_SEVERITY_LOW = 0x9148;
constexpr uint32_t GL_DEBUG_TYPE_MARKER = 0x8268;
constexpr uint32_t GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
constexpr uint32_t GL_DEBUG_TYPE_POP_GROUP = 0x826A;
constexpr uint32_t GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
constexpr uint32_t GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
constexpr uint32_t GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
constexpr uint32_t GL_BUFFER = 0x82E0;
constexpr uint32_t GL_SHADER = 0x82E1;
constexpr uint32_t GL_PROGRAM = 0x82E2;
constexpr uint32_t GL_VERTEX_ARRAY = 0x8074;
constexpr uint32_t GL_QUERY = 0x82E3;
constexpr uint32_t GL_PROGRAM_PIPELINE = 0x82E4;
constexpr uint32_t GL_SAMPLER = 0x82E6;
constexpr uint32_t GL_MAX_LABEL_LENGTH = 0x82E8;
constexpr uint32_t GL_DEBUG_OUTPUT = 0x92E0;
constexpr uint32_t GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
constexpr uint32_t GL_MAX_UNIFORM_LOCATIONS = 0x826E;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
constexpr uint32_t GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
constexpr uint32_t GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
constexpr uint32_t GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
constexpr uint32_t GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
constexpr uint32_t GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
constexpr uint32_t GL_INTERNALFORMAT_SUPPORTED = 0x826F;
constexpr uint32_t GL_INTERNALFORMAT_PREFERRED = 0x8270;
constexpr uint32_t GL_INTERNALFORMAT_RED_SIZE = 0x8271;
constexpr uint32_t GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
constexpr uint32_t GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
constexpr uint32_t GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
constexpr uint32_t GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
constexpr uint32_t GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
constexpr uint32_t GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
constexpr uint32_t GL_INTERNALFORMAT_RED_TYPE = 0x8278;
constexpr uint32_t GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
constexpr uint32_t GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
constexpr uint32_t GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
constexpr uint32_t GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
constexpr uint32_t GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
constexpr uint32_t GL_MAX_WIDTH = 0x827E;
constexpr uint32_t GL_MAX_HEIGHT = 0x827F;
constexpr uint32_t GL_MAX_DEPTH = 0x8280;
constexpr uint32_t GL_MAX_LAYERS = 0x8281;
constexpr uint32_t GL_MAX_COMBINED_DIMENSIONS = 0x8282;
constexpr uint32_t GL_COLOR_COMPONENTS = 0x8283;
constexpr uint32_t GL_DEPTH_COMPONENTS = 0x8284;
constexpr uint32_t GL_STENCIL_COMPONENTS = 0x8285;
constexpr uint32_t GL_COLOR_RENDERABLE = 0x8286;
constexpr uint32_t GL_DEPTH_RENDERABLE = 0x8287;
constexpr uint32_t GL_STENCIL_RENDERABLE = 0x8288;
constexpr uint32_t GL_FRAMEBUFFER_RENDERABLE = 0x8289;
constexpr uint32_t GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
constexpr uint32_t GL_FRAMEBUFFER_BLEND = 0x828B;
constexpr uint32_t GL_READ_PIXELS = 0x828C;
constexpr uint32_t GL_READ_PIXELS_FORMAT = 0x828D;
constexpr uint32_t GL_READ_PIXELS_TYPE = 0x828E;
constexpr uint32_t GL_TEXTURE_IMAGE_FORMAT = 0x828F;
constexpr uint32_t GL_TEXTURE_IMAGE_TYPE = 0x8290;
constexpr uint32_t GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
constexpr uint32_t GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
constexpr uint32_t GL_MIPMAP = 0x8293;
constexpr uint32_t GL_MANUAL_GENERATE_MIPMAP = 0x8294;
constexpr uint32_t GL_AUTO_GENERATE_MIPMAP = 0x8295;
constexpr uint32_t GL_COLOR_ENCODING = 0x8296;
constexpr uint32_t GL_SRGB_READ = 0x8297;
constexpr uint32_t GL_SRGB_WRITE = 0x8298;
constexpr uint32_t GL_FILTER = 0x829A;
constexpr uint32_t GL_VERTEX_TEXTURE = 0x829B;
constexpr uint32_t GL_TESS_CONTROL_TEXTURE = 0x829C;
constexpr uint32_t GL_TESS_EVALUATION_TEXTURE = 0x829D;
constexpr uint32_t GL_GEOMETRY_TEXTURE = 0x829E;
constexpr uint32_t GL_FRAGMENT_TEXTURE = 0x829F;
constexpr uint32_t GL_COMPUTE_TEXTURE = 0x82A0;
constexpr uint32_t GL_TEXTURE_SHADOW = 0x82A1;
constexpr uint32_t GL_TEXTURE_GATHER = 0x82A2;
constexpr uint32_t GL_TEXTURE_GATHER_SHADOW = 0x82A3;
constexpr uint32_t GL_SHADER_IMAGE_LOAD = 0x82A4;
constexpr uint32_t GL_SHADER_IMAGE_STORE = 0x82A5;
constexpr uint32_t GL_SHADER_IMAGE_ATOMIC = 0x82A6;
constexpr uint32_t GL_IMAGE_TEXEL_SIZE = 0x82A7;
constexpr uint32_t GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
constexpr uint32_t GL_IMAGE_PIXEL_FORMAT = 0x82A9;
constexpr uint32_t GL_IMAGE_PIXEL_TYPE = 0x82AA;
constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
constexpr uint32_t GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
constexpr uint32_t GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
constexpr uint32_t GL_CLEAR_BUFFER = 0x82B4;
constexpr uint32_t GL_TEXTURE_VIEW = 0x82B5;
constexpr uint32_t GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
constexpr uint32_t GL_FULL_SUPPORT = 0x82B7;
constexpr uint32_t GL_CAVEAT_SUPPORT = 0x82B8;
constexpr uint32_t GL_IMAGE_CLASS_4_X_32 = 0x82B9;
constexpr uint32_t GL_IMAGE_CLASS_2_X_32 = 0x82BA;
constexpr uint32_t GL_IMAGE_CLASS_1_X_32 = 0x82BB;
constexpr uint32_t GL_IMAGE_CLASS_4_X_16 = 0x82BC;
constexpr uint32_t GL_IMAGE_CLASS_2_X_16 = 0x82BD;
constexpr uint32_t GL_IMAGE_CLASS_1_X_16 = 0x82BE;
constexpr uint32_t GL_IMAGE_CLASS_4_X_8 = 0x82BF;
constexpr uint32_t GL_IMAGE_CLASS_2_X_8 = 0x82C0;
constexpr uint32_t GL_IMAGE_CLASS_1_X_8 = 0x82C1;
constexpr uint32_t GL_IMAGE_CLASS_11_11_10 = 0x82C2;
constexpr uint32_t GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
constexpr uint32_t GL_VIEW_CLASS_128_BITS = 0x82C4;
constexpr uint32_t GL_VIEW_CLASS_96_BITS = 0x82C5;
constexpr uint32_t GL_VIEW_CLASS_64_BITS = 0x82C6;
constexpr uint32_t GL_VIEW_CLASS_48_BITS = 0x82C7;
constexpr uint32_t GL_VIEW_CLASS_32_BITS = 0x82C8;
constexpr uint32_t GL_VIEW_CLASS_24_BITS = 0x82C9;
constexpr uint32_t GL_VIEW_CLASS_16_BITS = 0x82CA;
constexpr uint32_t GL_VIEW_CLASS_8_BITS = 0x82CB;
constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
constexpr uint32_t GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
constexpr uint32_t GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
constexpr uint32_t GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
constexpr uint32_t GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
constexpr uint32_t GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
constexpr uint32_t GL_UNIFORM = 0x92E1;
constexpr uint32_t GL_UNIFORM_BLOCK = 0x92E2;
constexpr uint32_t GL_PROGRAM_INPUT = 0x92E3;
constexpr uint32_t GL_PROGRAM_OUTPUT = 0x92E4;
constexpr uint32_t GL_BUFFER_VARIABLE = 0x92E5;
constexpr uint32_t GL_SHADER_STORAGE_BLOCK = 0x92E6;
constexpr uint32_t GL_VERTEX_SUBROUTINE = 0x92E8;
constexpr uint32_t GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
constexpr uint32_t GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
constexpr uint32_t GL_GEOMETRY_SUBROUTINE = 0x92EB;
constexpr uint32_t GL_FRAGMENT_SUBROUTINE = 0x92EC;
constexpr uint32_t GL_COMPUTE_SUBROUTINE = 0x92ED;
constexpr uint32_t GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
constexpr uint32_t GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
constexpr uint32_t GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
constexpr uint32_t GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
constexpr uint32_t GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
constexpr uint32_t GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
constexpr uint32_t GL_ACTIVE_RESOURCES = 0x92F5;
constexpr uint32_t GL_MAX_NAME_LENGTH = 0x92F6;
constexpr uint32_t GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
constexpr uint32_t GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
constexpr uint32_t GL_NAME_LENGTH = 0x92F9;
constexpr uint32_t GL_TYPE = 0x92FA;
constexpr uint32_t GL_ARRAY_SIZE = 0x92FB;
constexpr uint32_t GL_OFFSET = 0x92FC;
constexpr uint32_t GL_BLOCK_INDEX = 0x92FD;
constexpr uint32_t GL_ARRAY_STRIDE = 0x92FE;
constexpr uint32_t GL_MATRIX_STRIDE = 0x92FF;
constexpr uint32_t GL_IS_ROW_MAJOR = 0x9300;
constexpr uint32_t GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
constexpr uint32_t GL_BUFFER_BINDING = 0x9302;
constexpr uint32_t GL_BUFFER_DATA_SIZE = 0x9303;
constexpr uint32_t GL_NUM_ACTIVE_VARIABLES = 0x9304;
constexpr uint32_t GL_ACTIVE_VARIABLES = 0x9305;
constexpr uint32_t GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
constexpr uint32_t GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
constexpr uint32_t GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
constexpr uint32_t GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
constexpr uint32_t GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
constexpr uint32_t GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
constexpr uint32_t GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
constexpr uint32_t GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
constexpr uint32_t GL_LOCATION = 0x930E;
constexpr uint32_t GL_LOCATION_INDEX = 0x930F;
constexpr uint32_t GL_IS_PER_PATCH = 0x92E7;
constexpr uint32_t GL_SHADER_STORAGE_BUFFER = 0x90D2;
constexpr uint32_t GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
constexpr uint32_t GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
constexpr uint32_t GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
constexpr uint32_t GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
constexpr uint32_t GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
constexpr uint32_t GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
constexpr uint32_t GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
constexpr uint32_t GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
constexpr uint32_t GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
constexpr uint32_t GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
constexpr uint32_t GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
constexpr uint32_t GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
constexpr uint32_t GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
constexpr uint32_t GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
constexpr uint32_t GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
constexpr uint32_t GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
constexpr uint32_t GL_TEXTURE_BUFFER_OFFSET = 0x919D;
constexpr uint32_t GL_TEXTURE_BUFFER_SIZE = 0x919E;
constexpr uint32_t GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
constexpr uint32_t GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
constexpr uint32_t GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
constexpr uint32_t GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
constexpr uint32_t GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
constexpr uint32_t GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
constexpr uint32_t GL_VERTEX_ATTRIB_BINDING = 0x82D4;
constexpr uint32_t GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
constexpr uint32_t GL_VERTEX_BINDING_DIVISOR = 0x82D6;
constexpr uint32_t GL_VERTEX_BINDING_OFFSET = 0x82D7;
constexpr uint32_t GL_VERTEX_BINDING_STRIDE = 0x82D8;
constexpr uint32_t GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
constexpr uint32_t GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
constexpr uint32_t GL_VERTEX_BINDING_BUFFER = 0x8F4F;
constexpr uint32_t GL_DISPLAY_LIST = 0x82E7;
constexpr uint32_t GL_STACK_UNDERFLOW = 0x0504;
constexpr uint32_t GL_STACK_OVERFLOW = 0x0503;
constexpr uint32_t GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
constexpr uint32_t GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
constexpr uint32_t GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
constexpr uint32_t GL_MAP_PERSISTENT_BIT = 0x0040;
constexpr uint32_t GL_MAP_COHERENT_BIT = 0x0080;
constexpr uint32_t GL_DYNAMIC_STORAGE_BIT = 0x0100;
constexpr uint32_t GL_CLIENT_STORAGE_BIT = 0x0200;
constexpr uint32_t GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
constexpr uint32_t GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
constexpr uint32_t GL_BUFFER_STORAGE_FLAGS = 0x8220;
constexpr uint32_t GL_CLEAR_TEXTURE = 0x9365;
constexpr uint32_t GL_LOCATION_COMPONENT = 0x934A;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
constexpr uint32_t GL_QUERY_BUFFER = 0x9192;
constexpr uint32_t GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
constexpr uint32_t GL_QUERY_BUFFER_BINDING = 0x9193;
constexpr uint32_t GL_QUERY_RESULT_NO_WAIT = 0x9194;
constexpr uint32_t GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
constexpr uint32_t GL_CONTEXT_LOST = 0x0507;
constexpr uint32_t GL_NEGATIVE_ONE_TO_ONE = 0x935E;
constexpr uint32_t GL_ZERO_TO_ONE = 0x935F;
constexpr uint32_t GL_CLIP_ORIGIN = 0x935C;
constexpr uint32_t GL_CLIP_DEPTH_MODE = 0x935D;
constexpr uint32_t GL_QUERY_WAIT_INVERTED = 0x8E17;
constexpr uint32_t GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
constexpr uint32_t GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
constexpr uint32_t GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
constexpr uint32_t GL_MAX_CULL_DISTANCES = 0x82F9;
constexpr uint32_t GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
constexpr uint32_t GL_TEXTURE_TARGET = 0x1006;
constexpr uint32_t GL_QUERY_TARGET = 0x82EA;
constexpr uint32_t GL_GUILTY_CONTEXT_RESET = 0x8253;
constexpr uint32_t GL_INNOCENT_CONTEXT_RESET = 0x8254;
constexpr uint32_t GL_UNKNOWN_CONTEXT_RESET = 0x8255;
constexpr uint32_t GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
constexpr uint32_t GL_LOSE_CONTEXT_ON_RESET = 0x8252;
constexpr uint32_t GL_NO_RESET_NOTIFICATION = 0x8261;
constexpr uint32_t GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
constexpr uint32_t GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
constexpr uint32_t GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
constexpr uint32_t GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
constexpr uint32_t GL_SPIR_V_BINARY = 0x9552;
constexpr uint32_t GL_PARAMETER_BUFFER = 0x80EE;
constexpr uint32_t GL_PARAMETER_BUFFER_BINDING = 0x80EF;
constexpr uint32_t GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
constexpr uint32_t GL_VERTICES_SUBMITTED = 0x82EE;
constexpr uint32_t GL_PRIMITIVES_SUBMITTED = 0x82EF;
constexpr uint32_t GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
constexpr uint32_t GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
constexpr uint32_t GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
constexpr uint32_t GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
constexpr uint32_t GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
constexpr uint32_t GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
constexpr uint32_t GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
constexpr uint32_t GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
constexpr uint32_t GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
constexpr uint32_t GL_SPIR_V_EXTENSIONS = 0x9553;
constexpr uint32_t GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
constexpr uint32_t GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
constexpr uint32_t GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
constexpr uint32_t GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;

//OpenGL 1.0
GLAPI int32_t TRAP_OpenGL_VERSION_1_0;
typedef void(APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC glCullFace;
typedef void(APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC glFrontFace;
typedef void(APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC glHint;
typedef void(APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC glLineWidth;
typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC glPointSize;
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC glPolygonMode;
typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC glScissor;
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC glTexParameterf;
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXPARAMETERFVPROC glTexParameterfv;
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC glTexParameteri;
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIVPROC glTexParameteriv;
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE1DPROC glTexImage1D;
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE2DPROC glTexImage2D;
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC glDrawBuffer;
typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC glClear;
typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC glClearColor;
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC glClearStencil;
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC glClearDepth;
typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC glStencilMask;
typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC glColorMask;
typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC glDepthMask;
typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC glDisable;
typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC glEnable;
typedef void (APIENTRYP PFNGLFINISHPROC)();
GLAPI PFNGLFINISHPROC glFinish;
typedef void (APIENTRYP PFNGLFLUSHPROC)();
GLAPI PFNGLFLUSHPROC glFlush;
typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC glBlendFunc;
typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC glLogicOp;
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC glStencilFunc;
typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC glStencilOp;
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC glDepthFunc;
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC glPixelStoref;
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC glPixelStorei;
typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC glReadBuffer;
typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLREADPIXELSPROC glReadPixels;
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
GLAPI PFNGLGETBOOLEANVPROC glGetBooleanv;
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
GLAPI PFNGLGETDOUBLEVPROC glGetDoublev;
typedef GLenum(APIENTRYP PFNGLGETERRORPROC)();
GLAPI PFNGLGETERRORPROC glGetError;
typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
GLAPI PFNGLGETFLOATVPROC glGetFloatv;
typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
GLAPI PFNGLGETINTEGERVPROC glGetIntegerv;
typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC glGetString;
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLGETTEXIMAGEPROC glGetTexImage;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
typedef GLboolean(APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC glIsEnabled;
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEPROC glDepthRange;
typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC glViewport;

//OpenGL 1.1
GLAPI int32_t TRAP_OpenGL_VERSION_1_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC glDrawArrays;
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWELEMENTSPROC glDrawElements;
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC glPolygonOffset;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC glBindTexture;
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
GLAPI PFNGLDELETETEXTURESPROC glDeleteTextures;
typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
GLAPI PFNGLGENTEXTURESPROC glGenTextures;
typedef GLboolean(APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC glIsTexture;

//OpenGL 1.2
GLAPI int32_t TRAP_OpenGL_VERSION_1_2;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE3DPROC glTexImage3D;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;

//OpenGL 1.3
GLAPI int32_t TRAP_OpenGL_VERSION_1_3;
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
GLAPI PFNGLACTIVETEXTUREPROC glActiveTexture;
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;

//OpenGL 1.4
GLAPI int32_t TRAP_OpenGL_VERSION_1_4;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFPROC glPointParameterf;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPOINTPARAMETERIPROC glPointParameteri;
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLORPROC glBlendColor;
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
GLAPI PFNGLBLENDEQUATIONPROC glBlendEquation;

//OpenGL 1.5
GLAPI int32_t TRAP_OpenGL_VERSION_1_5;
typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENQUERIESPROC glGenQueries;
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETEQUERIESPROC glDeleteQueries;
typedef GLboolean(APIENTRYP PFNGLISQUERYPROC)(GLuint id);
GLAPI PFNGLISQUERYPROC glIsQuery;
typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
GLAPI PFNGLBEGINQUERYPROC glBeginQuery;
typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
GLAPI PFNGLENDQUERYPROC glEndQuery;
typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYIVPROC glGetQueryiv;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
GLAPI PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
GLAPI PFNGLBINDBUFFERPROC glBindBuffer;
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
GLAPI PFNGLDELETEBUFFERSPROC glDeleteBuffers;
typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
GLAPI PFNGLGENBUFFERSPROC glGenBuffers;
typedef GLboolean(APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERPROC glIsBuffer;
typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
GLAPI PFNGLBUFFERDATAPROC glBufferData;
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
GLAPI PFNGLBUFFERSUBDATAPROC glBufferSubData;
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
GLAPI PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
typedef void* (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAPBUFFERPROC glMapBuffer;
typedef GLboolean(APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
GLAPI PFNGLUNMAPBUFFERPROC glUnmapBuffer;
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
GLAPI PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;

//OpenGL 2.0
GLAPI int32_t TRAP_OpenGL_VERSION_2_0;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
GLAPI PFNGLDRAWBUFFERSPROC glDrawBuffers;
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
GLAPI PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLATTACHSHADERPROC glAttachShader;
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
GLAPI PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
GLAPI PFNGLCOMPILESHADERPROC glCompileShader;
typedef GLuint(APIENTRYP PFNGLCREATEPROGRAMPROC)();
GLAPI PFNGLCREATEPROGRAMPROC glCreateProgram;
typedef GLuint(APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
GLAPI PFNGLCREATESHADERPROC glCreateShader;
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
GLAPI PFNGLDELETEPROGRAMPROC glDeleteProgram;
typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
GLAPI PFNGLDELETESHADERPROC glDeleteShader;
typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLDETACHSHADERPROC glDetachShader;
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLAPI PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
typedef GLint(APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMIVPROC glGetProgramiv;
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
GLAPI PFNGLGETSHADERIVPROC glGetShaderiv;
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
GLAPI PFNGLGETSHADERSOURCEPROC glGetShaderSource;
typedef GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
GLAPI PFNGLGETUNIFORMFVPROC glGetUniformfv;
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
GLAPI PFNGLGETUNIFORMIVPROC glGetUniformiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
typedef GLboolean(APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
GLAPI PFNGLISPROGRAMPROC glIsProgram;
typedef GLboolean(APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
GLAPI PFNGLISSHADERPROC glIsShader;
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
GLAPI PFNGLLINKPROGRAMPROC glLinkProgram;
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
GLAPI PFNGLSHADERSOURCEPROC glShaderSource;
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
GLAPI PFNGLUSEPROGRAMPROC glUseProgram;
typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FPROC glUniform1f;
typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FPROC glUniform2f;
typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FPROC glUniform3f;
typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FPROC glUniform4f;
typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IPROC glUniform1i;
typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IPROC glUniform2i;
typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IPROC glUniform3i;
typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IPROC glUniform4i;
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM1FVPROC glUniform1fv;
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM2FVPROC glUniform2fv;
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM3FVPROC glUniform3fv;
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM4FVPROC glUniform4fv;
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM1IVPROC glUniform1iv;
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM2IVPROC glUniform2iv;
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM3IVPROC glUniform3iv;
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM4IVPROC glUniform4iv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLAPI PFNGLVALIDATEPROGRAMPROC glValidateProgram;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;

//OpenGL 2.1
GLAPI int32_t TRAP_OpenGL_VERSION_2_1;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;

//OpenGL 3.0
GLAPI int32_t TRAP_OpenGL_VERSION_3_0;
typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKIPROC glColorMaski;
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
GLAPI PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
GLAPI PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLENABLEIPROC glEnablei;
typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLDISABLEIPROC glDisablei;
typedef GLboolean(APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
GLAPI PFNGLISENABLEDIPROC glIsEnabledi;
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)();
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEPROC glBindBufferBase;
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
GLAPI PFNGLCLAMPCOLORPROC glClampColor;
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
GLAPI PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)();
GLAPI PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
GLAPI PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
GLAPI PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
typedef GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIPROC glUniform1ui;
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIPROC glUniform2ui;
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIPROC glUniform3ui;
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIPROC glUniform4ui;
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM1UIVPROC glUniform1uiv;
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM2UIVPROC glUniform2uiv;
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM3UIVPROC glUniform3uiv;
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM4UIVPROC glUniform4uiv;
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);
GLAPI PFNGLCLEARBUFFERIVPROC glClearBufferiv;
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);
GLAPI PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLAPI PFNGLCLEARBUFFERFVPROC glClearBufferfv;
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARBUFFERFIPROC glClearBufferfi;
typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
GLAPI PFNGLGETSTRINGIPROC glGetStringi;
typedef GLboolean(APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
typedef GLboolean(APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
typedef GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
GLAPI PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
typedef void* (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
GLAPI PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
GLAPI PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
typedef GLboolean(APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYPROC glIsVertexArray;

//OpenGL 3.1
GLAPI int32_t TRAP_OpenGL_VERSION_3_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERPROC glTexBuffer;
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices);
GLAPI PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
typedef GLuint(APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;

//OpenGL 3.2
GLAPI int32_t TRAP_OpenGL_VERSION_3_2;
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex);
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
GLAPI PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
typedef GLsync(APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
GLAPI PFNGLFENCESYNCPROC glFenceSync;
typedef GLboolean(APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
GLAPI PFNGLISSYNCPROC glIsSync;
typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
GLAPI PFNGLDELETESYNCPROC glDeleteSync;
typedef GLenum(APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLWAITSYNCPROC glWaitSync;
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
GLAPI PFNGLGETINTEGER64VPROC glGetInteger64v;
typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
GLAPI PFNGLGETSYNCIVPROC glGetSynciv;
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
GLAPI PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
GLAPI PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKIPROC glSampleMaski;

//OpenGL 3.3
GLAPI int32_t TRAP_OpenGL_VERSION_3_3;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
typedef GLint(APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
GLAPI PFNGLGENSAMPLERSPROC glGenSamplers;
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint* samplers);
GLAPI PFNGLDELETESAMPLERSPROC glDeleteSamplers;
typedef GLboolean(APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
GLAPI PFNGLISSAMPLERPROC glIsSampler;
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLAPI PFNGLBINDSAMPLERPROC glBindSampler;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
GLAPI PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
GLAPI PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
GLAPI PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat* param);
GLAPI PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
GLAPI PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint* param);
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
GLAPI PFNGLQUERYCOUNTERPROC glQueryCounter;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
GLAPI PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
GLAPI PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP2UIPROC glVertexP2ui;
typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP2UIVPROC glVertexP2uiv;
typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP3UIPROC glVertexP3ui;
typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP3UIVPROC glVertexP3uiv;
typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP4UIPROC glVertexP4ui;
typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP4UIVPROC glVertexP4uiv;
typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLNORMALP3UIPROC glNormalP3ui;
typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLNORMALP3UIVPROC glNormalP3uiv;
typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP3UIPROC glColorP3ui;
typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLCOLORP3UIVPROC glColorP3uiv;
typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP4UIPROC glColorP4ui;
typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLCOLORP4UIVPROC glColorP4uiv;
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;

//OpenGL 4.0
GLAPI int32_t TRAP_OpenGL_VERSION_4_0;
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
GLAPI PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
GLAPI PFNGLBLENDEQUATIONIPROC glBlendEquationi;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
GLAPI PFNGLBLENDFUNCIPROC glBlendFunci;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect);
GLAPI PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect);
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLAPI PFNGLUNIFORM1DPROC glUniform1d;
typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLUNIFORM2DPROC glUniform2d;
typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLUNIFORM3DPROC glUniform3d;
typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLUNIFORM4DPROC glUniform4d;
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM1DVPROC glUniform1dv;
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM2DVPROC glUniform2dv;
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM3DVPROC glUniform3dv;
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM4DVPROC glUniform4dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble* params);
GLAPI PFNGLGETUNIFORMDVPROC glGetUniformdv;
typedef GLint(APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar* name);
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
typedef GLuint(APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar* name);
GLAPI PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint* indices);
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint* params);
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
GLAPI PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
GLAPI PFNGLPATCHPARAMETERIPROC glPatchParameteri;
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat* values);
GLAPI PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
typedef GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)();
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)();
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
GLAPI PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
GLAPI PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;

//OpenGL 4.1
GLAPI int32_t TRAP_OpenGL_VERSION_4_1;
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)();
GLAPI PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length);
GLAPI PFNGLSHADERBINARYPROC glShaderBinary;
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLAPI PFNGLDEPTHRANGEFPROC glDepthRangef;
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLAPI PFNGLCLEARDEPTHFPROC glClearDepthf;
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
GLAPI PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
GLAPI PFNGLPROGRAMBINARYPROC glProgramBinary;
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
typedef GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar* const* strings);
GLAPI PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint* pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
typedef GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLAPI PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat* v);
GLAPI PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint* v);
GLAPI PFNGLSCISSORARRAYVPROC glScissorArrayv;
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORINDEXEDPROC glScissorIndexed;
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble* v);
GLAPI PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat* data);
GLAPI PFNGLGETFLOATI_VPROC glGetFloati_v;
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble* data);
GLAPI PFNGLGETDOUBLEI_VPROC glGetDoublei_v;

//OpenGL 4.2
GLAPI int32_t TRAP_OpenGL_VERSION_4_2;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint* params);
GLAPI PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERPROC glMemoryBarrier;
typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXSTORAGE1DPROC glTexStorage1D;
typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXSTORAGE2DPROC glTexStorage2D;
typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXSTORAGE3DPROC glTexStorage3D;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;

//OpenGL 4.3
GLAPI int32_t TRAP_OpenGL_VERSION_4_3;
typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARBUFFERDATAPROC glClearBufferData;
typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
GLAPI PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLAPI PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLAPI PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
typedef GLuint(APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params);
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
typedef GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
typedef GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI PFNGLTEXTUREVIEWPROC glTextureView;
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLAPI PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void* userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
typedef GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
GLAPI PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)();
GLAPI PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTLABELPROC glObjectLabel;
typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTLABELPROC glGetObjectLabel;
typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void* ptr, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
GLAPI PFNGLGETPOINTERVPROC glGetPointerv;

//OpenGL 4.4
GLAPI int32_t TRAP_OpenGL_VERSION_4_4;
typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags);
GLAPI PFNGLBUFFERSTORAGEPROC glBufferStorage;
typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARTEXIMAGEPROC glClearTexImage;
typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
GLAPI PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes);
GLAPI PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
typedef void (APIENTRYP PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
GLAPI PFNGLBINDTEXTURESPROC glBindTextures;
typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint* samplers);
GLAPI PFNGLBINDSAMPLERSPROC glBindSamplers;
typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
GLAPI PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLAPI PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;

//OpenGL 4.5
GLAPI int32_t TRAP_OpenGL_VERSION_4_5;
typedef void (APIENTRYP PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
GLAPI PFNGLCLIPCONTROLPROC glClipControl;
typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint* buffers);
GLAPI PFNGLCREATEBUFFERSPROC glCreateBuffers;
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
GLAPI PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
GLAPI PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
GLAPI PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
GLAPI PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
typedef GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
GLAPI PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void** params);
GLAPI PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
GLAPI PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
GLAPI PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
GLAPI PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
typedef GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint* param);
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
GLAPI PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
typedef void (APIENTRYP PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint* textures);
GLAPI PFNGLCREATETEXTURESPROC glCreateTextures;
typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXTUREBUFFERPROC glTextureBuffer;
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
GLAPI PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat* param);
GLAPI PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
GLAPI PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint* params);
GLAPI PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint* param);
GLAPI PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
GLAPI PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
GLAPI PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
GLAPI PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
GLAPI PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
GLAPI PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint* samplers);
GLAPI PFNGLCREATESAMPLERSPROC glCreateSamplers;
typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
GLAPI PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
typedef void (APIENTRYP PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint* ids);
GLAPI PFNGLCREATEQUERIESPROC glCreateQueries;
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
typedef GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC)();
GLAPI PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
typedef void (APIENTRYP PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETNTEXIMAGEPROC glGetnTexImage;
typedef void (APIENTRYP PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
GLAPI PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
GLAPI PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
GLAPI PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
typedef void (APIENTRYP PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
GLAPI PFNGLREADNPIXELSPROC glReadnPixels;
typedef void (APIENTRYP PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
GLAPI PFNGLGETNMAPDVPROC glGetnMapdv;
typedef void (APIENTRYP PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
GLAPI PFNGLGETNMAPFVPROC glGetnMapfv;
typedef void (APIENTRYP PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
GLAPI PFNGLGETNMAPIVPROC glGetnMapiv;
typedef void (APIENTRYP PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
GLAPI PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint* values);
GLAPI PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort* values);
GLAPI PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte* pattern);
GLAPI PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
typedef void (APIENTRYP PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
GLAPI PFNGLGETNCOLORTABLEPROC glGetnColorTable;
typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
GLAPI PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
GLAPI PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
GLAPI PFNGLGETNHISTOGRAMPROC glGetnHistogram;
typedef void (APIENTRYP PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
GLAPI PFNGLGETNMINMAXPROC glGetnMinmax;
typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC)();
GLAPI PFNGLTEXTUREBARRIERPROC glTextureBarrier;

//OpenGL 4.6
GLAPI int32_t TRAP_OpenGL_VERSION_4_6;
typedef void (APIENTRYP PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue);
GLAPI PFNGLSPECIALIZESHADERPROC glSpecializeShader;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount;
typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
GLAPI PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp;

#endif /*_TRAP_OPENGLLOADER_H_*/