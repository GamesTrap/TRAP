# Main Build CI. This compiles TRAPâ„¢ for Windows and Linux (Ubuntu)

name: Build-CI

# Controls when the workflow will run
on:
  # Run on all pull requests
  pull_request:
  # Run on main, master and dev branches
  push:
    branches: [ main, master, dev ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux-gcc-13:
    name: Build Linux GCC 13
    runs-on: [self-hosted, Linux, X64, ubuntu, "23.10", cpu]
    env:
      CC: gcc-13
      CXX: g++-13
    steps:
    - name: Cleanup workspace
      if: ${{ always() }}
      uses: gamestrap/gha-workspace-cleanup@v1.2.4
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Checkout DiscordGameSDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_DISCORDGAMESDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_DISCORDGAMESDK: ${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
      run: |
        cd Dependencies/DiscordGameSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Nsight Aftermath SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH: ${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
      run: |
        cd Dependencies/Nsight-Aftermath
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Reflex SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NVIDIAREFLEX
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NVIDIAREFLEX: ${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
      run: |
        cd Dependencies/NVIDIA-Reflex
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
        git pull origin main
        cd ../..
    - name: Checkout Steamworks SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_STEAMWORKSSDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_STEAMWORKSSDK: ${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
      run: |
        cd Dependencies/SteamworksSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
        git pull origin main
        cd ../..
    - name: Add toolchain ppa
      run: sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa
    - name: Update package list
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install -y cmake jq g++-13 mold xorg-dev libwayland-dev libxkbcommon-dev wayland-protocols
    - name: Make scripts and premake executable
      run: |
       chmod +x libs/premake5/linux/premake5
       chmod +x GeneratorScripts/GenerateProjectMake.sh
    - name: Generate Make files
      run: |
       cd GeneratorScripts/
       ./GenerateProjectMake.sh
       cd ..
    - name: Setup problem matchers
      uses: ./.github/composite/problem-matchers
    - name: Compile code
      run: config=release make all -j$(nproc)
    - name: Finalize data for artifact
      run: |
        cp -r Games/Headless-Tests/Assets bin/Release-linux-x86_64/Games/Headless-Tests/
        cp -r Games/Sandbox/Assets bin/Release-linux-x86_64/Games/Sandbox/
        cp -r Games/Tests/Assets bin/Release-linux-x86_64/Games/Tests/
        cp -r Games/Tests3D/Assets bin/Release-linux-x86_64/Games/Tests3D/
        cp -r Games/TRAP-Editor/Assets bin/Release-linux-x86_64/Games/TRAP-Editor/
        cp -r Games/TRAP-Editor/Resources bin/Release-linux-x86_64/Games/TRAP-Editor/
        cp -r Utility/QOIConv bin/Release-linux-x86_64/Utility/
        rm bin/Release-linux-x86_64/Utility/QOIConv/QOIConv.exe
    - name: Upload artifacts (TrappedGames)
      uses: ./.github/composite/artifact-upload
      with:
        target-filename: Linux GCC Release Executables
        server-hostname: ${{ secrets.ARTIFACT_HOST }}
        server-username: ${{ secrets.ARTIFACT_USERNAME }}
        server-password: ${{ secrets.ARTIFACT_PASSWORD }}
        folder-to-upload: >
          bin/Release-linux-x86_64/./Games
          bin/Release-linux-x86_64/./Utility
          bin/Release-linux-x86_64/./UnitTests
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux GCC Release Executables
        path: |
          bin/Release-linux-x86_64/Games
          bin/Release-linux-x86_64/Utility
          bin/Release-linux-x86_64/UnitTests
  build-linux-clang-17:
    name: Build Linux Clang 17
    runs-on: [self-hosted, Linux, X64, ubuntu, "23.10", cpu]
    env:
      CC: clang-17
      CXX: clang++-17
    steps:
    - name: Cleanup workspace
      if: ${{ always() }}
      uses: gamestrap/gha-workspace-cleanup@v1.2.4
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Checkout DiscordGameSDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_DISCORDGAMESDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_DISCORDGAMESDK: ${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
      run: |
        cd Dependencies/DiscordGameSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Nsight Aftermath SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH: ${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
      run: |
        cd Dependencies/Nsight-Aftermath
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Reflex SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NVIDIAREFLEX
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NVIDIAREFLEX: ${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
      run: |
        cd Dependencies/NVIDIA-Reflex
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
        git pull origin main
        cd ../..
    - name: Checkout Steamworks SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_STEAMWORKSSDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_STEAMWORKSSDK: ${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
      run: |
        cd Dependencies/SteamworksSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
        git pull origin main
        cd ../..
    - name: Add toolchain ppa
      run: sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa
    - name: Update package list
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install -y cmake jq clang-17 mold xorg-dev libwayland-dev libxkbcommon-dev wayland-protocols
    - name: Make scripts and premake executable
      run: |
        chmod +x libs/premake5/linux/premake5
        chmod +x GeneratorScripts/GenerateProjectMake.sh
    - name: Generate Make files
      run: |
        cd GeneratorScripts/
        ./GenerateProjectMake.sh
        cd ..
    - name: Setup problem matchers
      uses: ./.github/composite/problem-matchers
    - name: Compile code
      run: config=release make all -j$(nproc)
    - name: Finalize data for artifact
      run: |
        cp -r Games/Headless-Tests/Assets bin/Release-linux-x86_64/Games/Headless-Tests/
        cp -r Games/Sandbox/Assets bin/Release-linux-x86_64/Games/Sandbox/
        cp -r Games/Tests/Assets bin/Release-linux-x86_64/Games/Tests/
        cp -r Games/Tests3D/Assets bin/Release-linux-x86_64/Games/Tests3D/
        cp -r Games/TRAP-Editor/Assets bin/Release-linux-x86_64/Games/TRAP-Editor/
        cp -r Games/TRAP-Editor/Resources bin/Release-linux-x86_64/Games/TRAP-Editor/
        cp -r Utility/QOIConv bin/Release-linux-x86_64/Utility/
        rm bin/Release-linux-x86_64/Utility/QOIConv/QOIConv.exe
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux Clang Release Executables
        path: |
          bin/Release-linux-x86_64/Games
          bin/Release-linux-x86_64/Utility
          bin/Release-linux-x86_64/UnitTests
  build-windows-msvc-2022:
    name: Build Windows MSVC 2022
    runs-on: [self-hosted, windows, X64, cpu]
    steps:
    - name: Cleanup workspace
      if: ${{ always() }}
      uses: gamestrap/gha-workspace-cleanup@v1.2.4
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    - name: Checkout DiscordGameSDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_DISCORDGAMESDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_DISCORDGAMESDK: ${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
      run: |
        cd Dependencies/DiscordGameSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_DISCORDGAMESDK }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Nsight Aftermath SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NSIGHTAFTERMATH: ${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
      run: |
        cd Dependencies/Nsight-Aftermath
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NSIGHTAFTERMATH }}
        git pull origin main
        cd ../..
    - name: Checkout NVIDIA Reflex SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_NVIDIAREFLEX
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_NVIDIAREFLEX: ${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
      run: |
        cd Dependencies/NVIDIA-Reflex
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_NVIDIAREFLEX }}
        git pull origin main
        cd ../..
    - name: Checkout Steamworks SDK
      if: env.HAS_GIT_NDA_DEPS && env.HAS_GIT_NDA_DEPS_STEAMWORKSSDK
      env:
        HAS_GIT_NDA_DEPS: ${{ secrets.GIT_NDA_DEPS }}
        HAS_GIT_NDA_DEPS_STEAMWORKSSDK: ${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
      run: |
        cd Dependencies/SteamworksSDK
        git init
        git remote add origin ${{ secrets.GIT_NDA_DEPS }}/${{ secrets.GIT_NDA_DEPS_STEAMWORKSSDK }}
        git pull origin main
        cd ../..
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1
    - name: Generate Visual Studio 2022 Project files
      run: |
        cd GeneratorScripts
        .\GenerateProjectVS2022.bat
        cd ..
    - name: Setup problem matchers
      uses: ./.github/composite/problem-matchers
    - name: Compile code
      run: msbuild /m TRAP.sln /property:Configuration=Release
    - name: Finalize data for artifact
      run: |
        Xcopy Games\Headless-Tests\Assets bin\Release-windows-x86_64\Games\Headless-Tests\Assets /I /H /E /C
        Xcopy Games\Sandbox\Assets bin\Release-windows-x86_64\Games\Sandbox\Assets /I /H /E /C
        Xcopy Games\Tests\Assets bin\Release-windows-x86_64\Games\Tests\Assets /I /H /E /C
        Xcopy Games\Tests3D\Assets bin\Release-windows-x86_64\Games\Tests3D\Assets /I /H /E /C
        Xcopy Games\TRAP-Editor\Assets bin\Release-windows-x86_64\Games\TRAP-Editor\Assets /I /H /E /C
        Xcopy Games\TRAP-Editor\Resources bin\Release-windows-x86_64\Games\TRAP-Editor\Resources /I /H /E /C
        Xcopy Utility\QOIConv bin\Release-windows-x86_64\Utility\QOIConv /I /H /E /C
        Xcopy Redists bin\Release-windows-x86_64\Redists /I /H /E /C
        Get-ChildItem -Path "bin" -Filter "*.pdb" -Recurse | Remove-Item -Force
        Remove-Item bin\Release-windows-x86_64\Utility\QOIConv\QOIConv
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows MSVC 2022 Release Executables
        path: |
          bin/Release-windows-x86_64/Games
          bin/Release-windows-x86_64/Utility
          bin/Release-windows-x86_64/Redists
          bin/Release-windows-x86_64/UnitTests

  test-windows:
    name: Unit-Test Windows
    runs-on: [self-hosted, windows, X64, cpu]
    needs: [build-windows-msvc-2022]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Windows MSVC 2022 Release Executables
      - name: Run Tests
        run: |
          cd UnitTests
          $env:TRACY_NO_INVARIANT_CHECK=1; .\UnitTests.exe; Remove-Item Env:\TRACY_NO_INVARIANT_CHECK
  test-linux:
    name: Unit-Test Linux
    runs-on: [self-hosted, Linux, X64, ubuntu, "23.10", cpu]
    needs: [build-linux-clang-17]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Linux Clang Release Executables
      - name: Run Tests
        run: |
          cd UnitTests
          chmod +x UnitTests
          TRACY_NO_INVARIANT_CHECK=1 ./UnitTests
